{
  "hash": "6eb6e11d56bb4bf4326c2b204a0b7302",
  "result": {
    "markdown": "---\ntitle: '个体地址的空间绘图'\nauthor: '蔡苗'\ndate: '2022-10-04'\ncategories:\n  - R\n  - spatial\n#draft: false\n---\n\n\n在公共卫生的科研论文或标书撰写过程中，我们常常需要使用地址数据。此时，能用可视化的方式展示样本的空间分布往往能够给编辑或审稿人较好的印象分。\n\n# 空间数据总述\n\n## 数据类型\n\n-   矢量数据（vector data）：点、线、多边形（polygons）。常见数据格式：`.shp`。\n-   栅格数据（raster data）：一般是规整的相等面积的长方形格子。常见数据格式：`.tif`和`.nc`。\n\n下图展示了矢量数据和栅格数据的示意图\n\n::: {layout=\"[10,10]\" layout-valign=\"bottom\"}\n![矢量数据示例（广州市区县边界）](vector-data-example.png)\n\n![栅格数据示例（广州市区PM$_{2.5}$浓度分布）](raster-data-example.png)\n:::\n\n## 相关R包\n\n-   矢量数据：\n    -   新：`sf`\n    -   旧：`sp`\n-   栅格数据：\n    -   新：`stars`\n    -   旧：`raster`, `terra`\n\n## 相关函数\n\n### 读取数据\n\n-   矢量数据：`sf::read_sf()`\n-   栅格数据：\n    -   新：`stars::read_stars()`\n    -   旧：`raster::raster()`, `terra`\n\n# R语言实践\n\n## 加载环境\n\n首先需要加载R环境和相关的包。如果你使用的是课题组的Linux服务器，则下面三行均需要运行。如果你使用自己的电脑，或者你的R包环境已经配置好，可以忽略`pacman::p_load`下面的那两句。\n\n\n::: {.cell run='false'}\n\n```{.r .cell-code}\npacman::p_load(sf, stars, raster, dplyr, ggplot2, viridis, here, patchwork, ggspatial)\n\noptions(rgl.useNULL = TRUE)\nSys.setenv(PROJ_LIB = '/data1/Software/Installed/Anaconda3/envs/r4.1/share/proj')\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## 矢量边界绘制\n\n本节以中国的矢量图边界为例，展示用R的`sf`和`dplyr`包来处理矢量地图数据（`.shp`文件），然后用`ggplot2`来绘制矢量边界地图。由于全国的所有边界数据较大，绘制时间比较久，因此大部分时间本文采用广州市的区县边界进行展示。\n\n### 数据位置\n\n\n::: {.cell run='false'}\n\n```{.r .cell-code}\nshp_path = '/data2/ShareData/MAP/China_shp/'\n\nfs::dir_info(shp_path) %>% \n  select(path, size) %>% \n  filter(grepl('\\\\.shp', path))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  path                             size\n  <fs::path>                <fs::bytes>\n1 E:/China_shp/boundary.shp       1.01M\n2 E:/China_shp/city.shp          26.35M\n3 E:/China_shp/county.shp        57.66M\n4 E:/China_shp/NineLine.shp       2.88M\n5 E:/China_shp/province.shp      23.32M\n```\n:::\n:::\n\n\n从上到下分别是：\n\n1.  中国国界（`boundary.shp`）\n2.  中国市级边界（`city.shp`）\n3.  中国区县级边界（`county.shp`）\n4.  九段线（`NineLine.shp`）\n5.  中国省级边界（`province.shp`）\n\n### 矢量数据读取\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCN_boundary <- read_sf(here(shp_path, 'boundary.shp'))\nCN_city <- read_sf(here(shp_path, 'city.shp'))\nCN_county <- read_sf(here(shp_path, 'county.shp'))\nCN_9dash <- read_sf(here(shp_path, 'NineLine.shp'))\nCN_province <- read_sf(here(shp_path, 'province.shp'))\n```\n:::\n\n\n### 矢量数据清理\n\n这些矢量数据实际就像数据框，可以使用`dplyr`（`dplyr::select()`，`mutate()`, `filter()`, `arrange()`）的语法进行操作。例如，可以使用`filter()`选取广州市的区县边界：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCN_county %>% \n  filter(市 == '广州市')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 11 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 815833.3 ymin: 2383964 xmax: 925069.2 ymax: 2537977\nProjected CRS: Krasovsky_1940_Albers\n# A tibble: 11 × 8\n      PAC NAME   省代码 省     市代码 市     类型                       geometry\n *  <dbl> <chr>   <dbl> <chr>   <dbl> <chr>  <chr>            <MULTIPOLYGON [m]>\n 1 440103 荔湾区 440000 广东省 440100 广州市 市辖区 (((847866 2444953, 848089.6…\n 2 440104 越秀区 440000 广东省 440100 广州市 市辖区 (((848782.7 2445425, 849481…\n 3 440105 海珠区 440000 广东省 440100 广州市 市辖区 (((853312.2 2440874, 854128…\n 4 440106 天河区 440000 广东省 440100 广州市 市辖区 (((863466.5 2455459, 863169…\n 5 440111 白云区 440000 广东省 440100 广州市 市辖区 (((869239.4 2477347, 869252…\n 6 440112 黄埔区 440000 广东省 440100 广州市 市辖区 (((871179.3 2476068, 871272…\n 7 440113 番禺区 440000 广东省 440100 广州市 市辖区 (((876897.9 2433952, 876905…\n 8 440114 花都区 440000 广东省 440100 广州市 市辖区 (((847130 2495872, 847622.5…\n 9 440115 南沙区 440000 广东省 440100 广州市 市辖区 (((895851 2386042, 893897.1…\n10 440117 从化区 440000 广东省 440100 广州市 市辖区 (((921473.7 2534710, 921480…\n11 440118 增城区 440000 广东省 440100 广州市 市辖区 (((923442.3 2473232, 923443…\n```\n:::\n:::\n\n\n### 矢量边界绘制\n\n我们可以使用`ggplot2::geom_sf()`对广州市的区县边界进行绘制：\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市')) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-6-1.png){width=480}\n:::\n:::\n\n\n如果你讨厌灰色的填充颜色，也可以通过`fill = NA`把颜色去掉：\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市'),\n    fill = NA) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-7-1.png){width=480}\n:::\n:::\n\n\n加上指北针和标尺\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市'),\n    fill = NA) +\n  annotation_scale( # 标尺\n    width_hint = 0.4,\n    text_cex = 1,\n    unit_category = 'metric',\n    location = 'bl') +\n  annotation_north_arrow( # 指北针\n    location = \"tl\", \n    which_north = \"true\",\n    height = unit(0.7, \"cm\"),\n    width = unit(0.7, \"cm\"),\n    pad_y = unit(0.5, \"cm\")) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-8-1.png){width=480}\n:::\n:::\n\n\n### 矢量投影\n\nWGS84是目前最流行的地理坐标系统。在国际上，每个坐标系统都会被分配一个EPSG 代码，`EPSG:4326`就是WGS84 的代码。GPS是基于WGS84的，所以通常我们得到的坐标数据都是WGS84的。一般我们在存储数据时，仍然按WGS84存储。计算地理距离时也应该通过WGS84投影进行计算。\n\n但是如果绘图的时候使用WGS84投影，会显得靠近两极地区的面积失真。对于中国地图来说，WGS84投影非常不美观，画图来的地图像\"一只强制性脊柱炎的公鸡\"。因此，如果需要绘制全国地图，可以使用`ESPG: 4508`或者`ESPG: 32649`，在`ggplot2`中可以通过`coord_sf(crs = XXXX)`来设置整幅图的投影。\n\n对于矢量数据，可以通过`sf::transform()`对其投影进行转换，如：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 原始数据投影为Asia_North_Albers_Equal_Area_Conic\nCN_province\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 34 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -3034406 ymin: 378665.2 xmax: 1844827 ymax: 5866009\nProjected CRS: Asia_North_Albers_Equal_Area_Conic\n# A tibble: 34 × 3\n   CNAME      Name_E                                                    geometry\n   <chr>      <chr>                                           <MULTIPOLYGON [m]>\n 1 安徽省     Anhui     (((578768.5 3711869, 578787.1 3711729, 578883.3 3711606…\n 2 澳门       Macao     (((373363.8 2308123, 373702.6 2307267, 373759.7 2307131…\n 3 北京市     Beijing   (((548491.6 4437692, 548534.5 4437621, 548562 4437591, …\n 4 福建省     Fujian    (((759764.7 2483316, 759718.8 2483296, 759692.8 2483307…\n 5 甘肃省     Gansu     (((-350146.9 3792524, -350199 3792482, -350290 3792537,…\n 6 广东省     Guangdong (((12072.27 2090275, 12129.04 2090236, 12168.24 2090234…\n 7 广西自治区 Guangxi   (((-83804.96 2165368, -83767.37 2165360, -83726.52 2165…\n 8 贵州省     Guizhou   (((-495399.6 2617929, -495408.6 2617927, -495417.3 2617…\n 9 海南省     Hainan    (((251802.2 378776.4, 251001.7 378665.2, 249527.3 37878…\n10 河北省     Hebei     (((645925.9 4168006, 646146.8 4167906, 646334.2 4167914…\n# … with 24 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n\n```{.r .cell-code}\n# 我们将其投影为WGS84\nCN_province_4326 = st_transform(CN_province, crs = 4326)\nCN_province_4326\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 34 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 73.48735 ymin: 3.833843 xmax: 134.7752 ymax: 53.5616\nGeodetic CRS:  WGS 84\n# A tibble: 34 × 3\n   CNAME      Name_E                                                    geometry\n * <chr>      <chr>                                           <MULTIPOLYGON [°]>\n 1 安徽省     Anhui     (((116.4295 34.63088, 116.4296 34.62963, 116.4306 34.62…\n 2 澳门       Macao     (((113.5874 22.16486, 113.5904 22.15695, 113.5909 22.15…\n 3 北京市     Beijing   (((116.632 41.05889, 116.6325 41.05824, 116.6328 41.057…\n 4 福建省     Fujian    (((117.4155 23.56092, 117.415 23.56077, 117.4148 23.560…\n 5 甘肃省     Gansu     (((106.0713 35.44953, 106.0708 35.44915, 106.0697 35.44…\n 6 广东省     Guangdong (((110.1136 20.23365, 110.1142 20.23329, 110.1146 20.23…\n 7 广西自治区 Guangxi   (((109.2054 20.91925, 109.2058 20.91918, 109.2062 20.91…\n 8 贵州省     Guizhou   (((105.0947 24.92519, 105.0946 24.92517, 105.0945 24.92…\n 9 海南省     Hainan    (((112.0392 3.834796, 112.0327 3.833843, 112.0208 3.835…\n10 河北省     Hebei     (((117.558 38.61515, 117.5605 38.61412, 117.5627 38.614…\n# … with 24 more rows\n# ℹ Use `print(n = ...)` to see more rows\n```\n:::\n:::\n\n\n在使用`ggplot2`绘图过程中，也可以通过`coord_sf(crs = XXXX)`对投影进行转换。\n\n\n::: panel-tabset\n## ESPG: 4326\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = CN_province, fill = NA, size = 0.1) +\n  geom_sf(data = CN_9dash %>% \n            filter(LEFT_FID == 0)) +\n  labs(title = 'ESPG: 4326') +\n  theme_void(base_size = 14) +\n  coord_sf(crs = 4326)\n```\n:::\n\n\n![](ESPG-4326.png){width=\"75%\" fig-align=\"center\"}\n\n## ESPG: 4326\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = CN_province, fill = NA, size = 0.1) +\n  geom_sf(data = CN_9dash %>% \n            filter(LEFT_FID == 0)) +\n  labs(title = 'ESPG: 4508') +\n  theme_void(base_size = 14) +\n  coord_sf(crs = 4508)\n```\n:::\n\n\n![](ESPG-4508.png){width=\"75%\" fig-align=\"center\"}\n\n## ESPG: 32649\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = CN_province, fill = NA, size = 0.1) +\n  geom_sf(data = CN_9dash %>% \n            filter(LEFT_FID == 0)) +\n  labs(title = 'ESPG: 32649') +\n  theme_void(base_size = 14) +\n  coord_sf(crs = 32649)\n```\n:::\n\n\n![](ESPG-32649.png){width=\"75%\" fig-align=\"center\"}\n:::\n\n## 栅格数据绘制\n\n### 数据读取\n\n通过`stars::read_stars()`读取`.tif`文件得到的是`stars`数据类型，属于栅格数据类型。`stars`数据一般有三个维度（dimension）：`x`，`y`和`band`，其中`x`和`y`分别为经纬度，`band`则指时间维度，可将不同日期的数据整合到同一个`stars`对象中。除了维度之外，还包括一个属性（attribute），主要指数据变量，如空气污染和绿植覆盖。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npm_gz = read_stars('E:/China_shp/CHAP_PM2.5_Guangzhou.tif')\npm_gz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n                          Min. 1st Qu. Median     Mean 3rd Qu. Max. NA's\nCHAP_PM2.5_Guangzhou.tif  20.5    21.9   22.8 22.77476    23.5 30.7 8557\ndimension(s):\n  from  to  offset delta refsys point values x/y\nx    1 109 112.962  0.01 WGS 84 FALSE   NULL [x]\ny    1 136 23.9297 -0.01 WGS 84 FALSE   NULL [y]\n```\n:::\n:::\n\n\n此处的样例数据因为是单天的数据，因此只有两个维度（`x`和y`），没有`band`的维度。数据的属性为`CHAP_PM2.5_Guangzhou`，并且报告了其简单的统计量（最小值、最大值、均值、缺失值数量以及四分位数）。每个维度都有一个名字（如`x`和`y`），每个维度的域的含义分别为：\n\n|    域    |  含义  |\n|:--------:|--------|\n|`from`    |原点|\n|`to`      |终点的索引|\n|`offset`  |此维度起始点的值|\n|`delta`   |此维度网格的大小|\n|`refsys`  |投影系统|\n|`point`   |逻辑值，`TRUE`代表点，`FALSE`代表区间|\n|`values`  |此维度的值|\n\n`stars`数据类型也可以通过`dplyr`包中的函数进行清理和转换。由于内容较多，此处不再详述，有兴趣的读者可以参考官方手册：\n\n- [stars tidyverse methods](https://cran.r-project.org/web/packages/stars/vignettes/stars3.html)\n\n### 栅格数据清理\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(cubelyr)\n\npm_gz_cube = as.tbl_cube(pm_gz)\nstr(pm_gz_cube)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 2\n $ dims:List of 2\n  ..$ x: num [1:109] 113 113 113 113 113 ...\n  ..$ y: num [1:136] 23.9 23.9 23.9 23.9 23.9 ...\n $ mets:List of 1\n  ..$ CHAP_PM2.5_Guangzhou.tif: num [1:109, 1:136] NA NA NA NA NA NA NA NA NA NA ...\n - attr(*, \"class\")= chr \"tbl_cube\"\n```\n:::\n:::\n\n\n可以将其转换成`data.frame`以方便后续的操作，如双线性插值等。\n\n\n::: {.cell}\n\n```{.r .cell-code}\npm_gz_tbl = as_tibble(pm_gz)\nstr(pm_gz_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [14,824 × 3] (S3: tbl_df/tbl/data.frame)\n $ x                       : num [1:14824] 113 113 113 113 113 ...\n $ y                       : num [1:14824] 23.9 23.9 23.9 23.9 23.9 ...\n $ CHAP_PM2.5_Guangzhou.tif: num [1:14824] NA NA NA NA NA NA NA NA NA NA ...\n```\n:::\n:::\n\n\n\n\n\n### 栅格数据绘制\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_stars(data = pm_gz) +\n  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white', breaks = 20:29) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  guides(fill = guide_coloursteps( # guide_colourbar\n      title.position = \"top\",\n      title.theme = element_text(size = 16),\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(0.7, \"cm\"),\n      barheight = unit(7, \"cm\"),\n      ticks = FALSE,\n      ticks.colour = 'white',\n      ticks.linewidth = 1.5)) +\n  theme_void(base_size = 16) +\n  coord_sf(crs = 4326)\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### 栅格和矢量数据混合绘制\n\n单纯的栅格数据比较单调，缺少行政边界信息。通过`ggplot2`的图层，我们可以轻松地加上矢量边界信息。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_stars(data = pm_gz) +\n  geom_sf(data = CN_county %>% \n      filter(市 == '广州市'), fill = NA) +\n  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white') +\n  theme_void(base_size = 16) +\n  coord_sf(crs = 4326)\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## 矢量和栅格数据相互转换\n\n### 矢量 --\\> 等面积格子\n\n将行政边界数据转换成相等大小的小格子。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngz_rect = CN_city %>% \n  filter(市 == '广州市') %>% \n  st_transform(crs = 4326) %>% \n  st_make_grid(cellsize = c(0.02, 0.02))\n\nggplot() + \n  geom_sf(data = gz_rect, fill = NA, size = 0.1) +\n  geom_sf(data = filter(CN_county, 市 == '广州市'), \n          fill = 'gray60', alpha = 0.3, size = 0.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngz_grids = st_intersection(\n  gz_rect, \n  CN_city %>% \n    filter(市 == '广州市') %>% \n    st_transform(crs = 4326))\n\nggplot() + \n  geom_sf(data = gz_grids, fill = NA) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n### 栅格 --\\> 矢量\n\n\n::: {.cell}\n\n```{.r .cell-code}\npm_gz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n                          Min. 1st Qu. Median     Mean 3rd Qu. Max. NA's\nCHAP_PM2.5_Guangzhou.tif  20.5    21.9   22.8 22.77476    23.5 30.7 8557\ndimension(s):\n  from  to  offset delta refsys point values x/y\nx    1 109 112.962  0.01 WGS 84 FALSE   NULL [x]\ny    1 136 23.9297 -0.01 WGS 84 FALSE   NULL [y]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npm_gz_sf = st_as_sf(pm_gz, as_points = FALSE, merge = FALSE)\npm_gz_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6267 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 112.9622 ymin: 22.5697 xmax: 114.0522 ymax: 23.9297\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   CHAP_PM2.5_Guangzhou.tif                       geometry\n1                      21.2 POLYGON ((113.8522 23.9297,...\n2                      21.2 POLYGON ((113.8622 23.9297,...\n3                      21.2 POLYGON ((113.8722 23.9297,...\n4                      21.1 POLYGON ((113.8822 23.9297,...\n5                      21.1 POLYGON ((113.8922 23.9297,...\n6                      21.1 POLYGON ((113.9022 23.9297,...\n7                      21.1 POLYGON ((113.9122 23.9297,...\n8                      21.0 POLYGON ((113.9222 23.9297,...\n9                      21.0 POLYGON ((113.9322 23.9297,...\n10                     21.0 POLYGON ((113.9422 23.9297,...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_sf(data = pm_gz_sf, fill = NA) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n可以加上格子的边界，只用于提醒这里是规则格子的矢量多边形，而不是栅格数据。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = pm_gz_sf, aes(fill = CHAP_PM2.5_Guangzhou.tif), \n          color = 'white', size = 0.1) +\n  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white', breaks = 20:29) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  guides(fill = guide_coloursteps( # guide_colourbar\n      title.position = \"top\",\n      title.theme = element_text(size = 16),\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(0.7, \"cm\"),\n      barheight = unit(7, \"cm\"),\n      ticks = FALSE,\n      ticks.colour = 'white',\n      ticks.linewidth = 1.5)) +\n  theme_void(base_size = 16) +\n  coord_sf(crs = 4326)\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n去掉白色的边界后图如下所示，生成的图与使用`geom_stars()`和栅格数据画出来的图像一模一样。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = pm_gz_sf, aes(fill = CHAP_PM2.5_Guangzhou.tif), \n          color = NA) +\n  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white', breaks = 20:29) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  guides(fill = guide_coloursteps( # guide_colourbar\n      title.position = \"top\",\n      title.theme = element_text(size = 16),\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(0.7, \"cm\"),\n      barheight = unit(7, \"cm\"),\n      ticks = FALSE,\n      ticks.colour = 'white',\n      ticks.linewidth = 1.5)) +\n  theme_void(base_size = 16) +\n  coord_sf(crs = 4326)\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## `sf` points\n\n## sample from multivariate normal distributions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_obs = 5*10^3\n\n\n\nsigma <- matrix(c(1, 1, 1, 1), 2, 2)\n\nvar_comp = MASS::mvrnorm(n = n_obs, rep(0, 2), sigma) %>% \n  as.data.frame()\ncolnames(var_comp) = c('var1', 'var2')\n\nsysu = tibble(\n    lat = c(23.128, 23.09, 23.13, 23.10, 23.23, 23.11),\n    lon = c(113.289, 113.29, 113.32, 113.33, 113.22, 113.42)) %>% \n  slice(sample(1:n(), n_obs, replace = T)) %>% \n  bind_cols(var_comp) %>% \n  mutate(lat = lat + var1,\n         lon = lon + var1)\n\n\nsysu_sf = sysu %>% \n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) %>% \n  mutate(intersection = geometry %>% \n           st_intersects(\n             CN_city %>% \n               filter(市 == '广州市') %>% \n               st_transform(crs = 4326)) %>% \n           as.character()) %>% \n  filter(intersection == 1)\n\n\n\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市'), fill = NA) +\n  geom_sf(data = sysu_sf, size = 1, alpha = 0.2) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](spatial-map_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "spatial-map_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}