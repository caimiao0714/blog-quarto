[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "蔡苗 | Miao Cai",
    "section": "",
    "text": "我是蔡苗，现在是在美国退伍军人事务部的临床流行病学研究中心(圣路易斯分部)担任生物统计研究员，运用R, SAS和美国退伍军人的数据做临床流行病学的研究。\n我的研究兴趣是贝叶斯统计，可修复系统可靠性，临床流行病，环境流行病学。我的研究发表可以在Google Scholar和Research Gate上查看，我在GitHub上也比较活跃。中文简历"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Miao Cai PhD is current working as a post-doc researcher in Sun Yat-sen University, Guangzhou, China. His."
  },
  {
    "objectID": "blogs.html",
    "href": "blogs.html",
    "title": "博客 | Blogs",
    "section": "",
    "text": "R\n\n\nspatial\n\n\n\n\n\n\n\n\n\n\n\nOct 4, 2022\n\n\n蔡苗\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "以第一作者身份发表于JAMA Network Open, Neurology, Environmental Health Perspectives等14种杂志。"
  },
  {
    "objectID": "publications.html#section",
    "href": "publications.html#section",
    "title": "Publications",
    "section": "2022",
    "text": "2022\n\nCai, M., Li, H., Wu, Y., Zhang. S., Wang. X., Zhang. Z., Lin. H.* (2022) Ambient Air Pollution Associated with Body Fat Percentages at Different Body Compartments: A Cohort Study of UK Biobank Participants. Environmental Health Perspectives. 130(6): 067702. DOI: 10.1289/EHP10920\nCai, M., Zhang, S., Lin, X., Qian, Z., McMillin, S.E., Yang, Y., Zhang, Z., Pan, J., Lin, H.. (2022) Association of ambient particulate matter pollution of different sizes with in-hospital case fatality among stroke patients in China. Neurology. 98(4), e2474-e2486. DOI: 10.1212/WNL.0000000000200546\nCai, M., Lin, X., Wang, X., Zhang, S., Qian, Z., McMillin, S.E., Aaron, H.E., Lin, H., Wei, J., Zhang, Z., Pan, J. (2022) Ambient particulate matter pollution of different sizes associated with recurrent stroke hospitalization in China: a cohort study of 1.07 million stroke patients. Science of the Total Environment. 159104. DOI: 10.1016/j.scitotenv.2022.159104\nCai, M., Liu, E., Bai, P., Zhang, N., Wang, S., Li, W., Lin, H., Lin, X.∗. (2022) “The Chasm in Percutaneous Coronary Intervention and In-hospital Mortality Rates among Acute Myocardial Infarction Patients in Rural and Urban Hospitals in China: A Mediation Analysis”, International Journal of Public Health. DOI: 10.3389/ijph.2022.1604846\nCai, M., Mehdizadeh, A., Hu, Q., Alamdar Yazdi, M., Vinel, A., Davis, K., Megahed, F., Rigdon, S. (2022) Hierarchical Point Process Models for Recurring Safety Critical Events Involving Commercial Truck Drivers: A Reliability Framework for Human Performance Modeling. Journal of Quality Technology. 54(4): 466-484. DOI: 10.1080/00224065.2021.1939815"
  },
  {
    "objectID": "publications.html#section-1",
    "href": "publications.html#section-1",
    "title": "Publications",
    "section": "2021",
    "text": "2021\n\nCai, M., Xie, Y., Bowe, B., Yan, Y., Al-Aly, Z. (2021) Temporal Trends in Incidence Rates of Lower Extremity Amputation and Associated Risk Factors Among Patients Using Veterans Health Administration Services From 2008 to 2018. JAMA Network Open. 4(1), e2033953-e2033953. DOI: 10.1001/jamanetworkopen.2020.33953\nCai, M., Alamdar Yazdi, M., Hu, Q., Mehdizadeh, A., Vinel, A., Davis, K.C., Megahed, F.M., Rigdon, S.E. (2021) The association between crashes and safety-critical events: synthesized evidence from crash reports and naturalistic driving data among commercial truck drivers. Transportation Research Part C: Emerging Technologies. 126(5): 103016. DOI: 10.1016/j.trc.2021.103016\nCai, M., Bowe, B., Xie, Y., Al-Aly, Z.∗. (2021) “Temporal Trends in COVID-19 Mortality: A Report from the US Department of Veteran Affairs”, BMJ Open. 11(8), 1-10. DOI: 10.1136/bmjopen-2020-047369\nCai, M., Zhang, B., Yang, R., Zheng, T., Dong, G., Lin, H., Rigdon, S., Xian, H., Hinyard, L., Xaverius, P., Burroughs, T., Liu, E., Jansson, D., Yang, S., Qian, Z. (2021) “Association between maternal outdoor physical exercise and the risk of preterm birth: a case-control study in Wuhan, China. BMC Pregnancy and Childbirth. 21(1), 1-9. DOI: 10.1186/s12884-021-03678-9"
  },
  {
    "objectID": "publications.html#and-before",
    "href": "publications.html#and-before",
    "title": "Publications",
    "section": "2020 and before",
    "text": "2020 and before\n\nCai, M., Liu, E., Zhang, R., Lin, X., Rigdon, S.E., Qian, Z., Belue, R., Chang, J.J. (2020) “Comparing the Performance of Charlson and Elixhauser Comorbidity Indices to Predict In-Hospital Mortality Among a Chinese Population”, Clinical Epidemiology. 12, 307–316. DOI: 10.2147/CLEP.S241610\nCai, M., Liu, E., Li, W. (2018). “Rural Versus Urban Patients: Benchmarking the Outcomes of Patients with Acute Myocardial Infarction in Shanxi, China from 2013 to 2017”, International Journal of Environmental Research and Public Health. 15(9), 1-16. DOI: 10.3390/ijerph15091930\nCai, M., Liu, E., Tao, H., Qian, Z., Fu, Q., Lin, X., Wang, M., Xu, C., Ni, Z. (2018). Does A Medical Consortium Influence Health Outcomes of Hospitalized Cancer Patients? An Integrated Care Model in Shanxi, China, International Journal of Integrated Care. 18(2), 1-10. DOI: 10.5334/ijic.3588\nCai, M., Liu, E., Tao, H., Qian, Z., Lin, X., Cheng, Z. (2018). Does Level of Hospital Matter? A Study of Mortality of Acute Myocardial Infarction Patients in Shanxi, China. American Journal of Medical Quality. 33(2), 185-192. DOI: 10.1177/1062860617708608"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html",
    "href": "posts/spatial-map/spatial-map.html",
    "title": "个体地址的空间绘图",
    "section": "",
    "text": "在公共卫生的科研论文或标书撰写过程中，我们常常需要使用地址数据。此时，能用可视化的方式展示样本的空间分布往往能够给编辑或审稿人较好的印象分。"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#加载环境",
    "href": "posts/spatial-map/spatial-map.html#加载环境",
    "title": "个体地址的空间绘图",
    "section": "加载环境",
    "text": "加载环境\n首先需要加载R环境和相关的包。如果你使用的是课题组的Linux服务器，则下面三行均需要运行。如果你使用自己的电脑，或者你的R包环境已经配置好，可以忽略pacman::p_load下面的那两句。\n\npacman::p_load(raster, sf, stars, cubelyr, dplyr, ggplot2, viridis, here, ggspatial)\n\noptions(rgl.useNULL = TRUE)\nSys.setenv(PROJ_LIB = '/data1/Software/Installed/Anaconda3/envs/r4.1/share/proj')"
  },
  {
    "objectID": "index.html#教育经历",
    "href": "index.html#教育经历",
    "title": "蔡苗 | Miao Cai",
    "section": "教育经历",
    "text": "教育经历\n\n2017 – 2020 美国圣路易斯大学生物统计方向公共卫生学博士\n2014 – 2017 中国华中科技大学医院管理学方向管理学硕士\n2010 – 2014 中国华中科技大学卫生事业管理学方向管理学学士"
  },
  {
    "objectID": "index.html#工作经验",
    "href": "index.html#工作经验",
    "title": "蔡苗 | Miao Cai",
    "section": "工作经验",
    "text": "工作经验\n\n2021 – 2022 中山大学公共卫生学院 博士后\n2019 – 2021 美国退伍军人事务部临床流行病学研究中心 生物统计研究员\n2017 – 2019 圣路易斯大学公共卫生与社会正义学院(美国国家自然科学基金资助) 研究助理\n2016 湖北武汉雕龙数据科技有限公司数据科学家"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#简单的中国地图的矢量图灰质",
    "href": "posts/spatial-map/spatial-map.html#简单的中国地图的矢量图灰质",
    "title": "病人地址的空间绘图",
    "section": "简单的中国地图的矢量图灰质",
    "text": "简单的中国地图的矢量图灰质"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#简单的中国地图的矢量图绘制",
    "href": "posts/spatial-map/spatial-map.html#简单的中国地图的矢量图绘制",
    "title": "病人地址的空间绘图",
    "section": "简单的中国地图的矢量图绘制",
    "text": "简单的中国地图的矢量图绘制\n\n数据读取\n\nshp_path = 'E:/Onedrive - personal/OneDrive/Data/shp/China_shp'\n\n# A tibble: 5 × 2\n  path                                                                   size\n  <fs::path>                                                      <fs::bytes>\n1 E:/Onedrive - personal/OneDrive/Data/shp/China_shp/boundary.shp       1.01M\n2 E:/Onedrive - personal/OneDrive/Data/shp/China_shp/city.shp          26.35M\n3 E:/Onedrive - personal/OneDrive/Data/shp/China_shp/county.shp        57.66M\n4 E:/Onedrive - personal/OneDrive/Data/shp/China_shp/NineLine.shp       2.88M\n5 E:/Onedrive - personal/OneDrive/Data/shp/China_shp/province.shp      23.32M\n\n\n从上到下分别是：九段线、中国国界、中国市级边界、中国区县级边界、中国省级边界"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#中国的矢量图绘制",
    "href": "posts/spatial-map/spatial-map.html#中国的矢量图绘制",
    "title": "个体地址的空间绘图",
    "section": "中国的矢量图绘制",
    "text": "中国的矢量图绘制\n\n数据位置\n\nshp_path = 'E:/China_shp'\n\n# A tibble: 5 × 2\n  path                             size\n  <fs::path>                <fs::bytes>\n1 E:/China_shp/boundary.shp       1.01M\n2 E:/China_shp/city.shp          26.35M\n3 E:/China_shp/county.shp        57.66M\n4 E:/China_shp/NineLine.shp       2.88M\n5 E:/China_shp/province.shp      23.32M\n\n\n从上到下分别是：\n\n中国国界（boundary.shp）\n中国市级边界（city.shp）\n中国区县级边界（county.shp）\n九段线（NineLine.shp）\n中国省级边界（province.shp）\n\n\n\n数据读取\n\nCN_boundary <- read_sf(here(shp_path, 'boundary.shp'))\nCN_city <- read_sf(here(shp_path, 'city.shp'))\nCN_county <- read_sf(here(shp_path, 'county.shp'))\nCN_9dash <- read_sf(here(shp_path, 'NineLine.shp'))\nCN_province <- read_sf(here(shp_path, 'province.shp'))\n\n这些矢量数据实际就像数据框，可以使用dplyr（dplyr::select()，mutate(), filter(), arrange()）的语法进行操作。例如，可以使用filter()选取广州市的区县边界：\n\nCN_county %>% \n  filter(市 == '广州市')\n\nSimple feature collection with 11 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 815833.3 ymin: 2383964 xmax: 925069.2 ymax: 2537977\nProjected CRS: Krasovsky_1940_Albers\n# A tibble: 11 × 8\n      PAC NAME   省代码 省     市代码 市     类型                       geometry\n *  <dbl> <chr>   <dbl> <chr>   <dbl> <chr>  <chr>            <MULTIPOLYGON [m]>\n 1 440103 荔湾区 440000 广东省 440100 广州市 市辖区 (((847866 2444953, 848089.6…\n 2 440104 越秀区 440000 广东省 440100 广州市 市辖区 (((848782.7 2445425, 849481…\n 3 440105 海珠区 440000 广东省 440100 广州市 市辖区 (((853312.2 2440874, 854128…\n 4 440106 天河区 440000 广东省 440100 广州市 市辖区 (((863466.5 2455459, 863169…\n 5 440111 白云区 440000 广东省 440100 广州市 市辖区 (((869239.4 2477347, 869252…\n 6 440112 黄埔区 440000 广东省 440100 广州市 市辖区 (((871179.3 2476068, 871272…\n 7 440113 番禺区 440000 广东省 440100 广州市 市辖区 (((876897.9 2433952, 876905…\n 8 440114 花都区 440000 广东省 440100 广州市 市辖区 (((847130 2495872, 847622.5…\n 9 440115 南沙区 440000 广东省 440100 广州市 市辖区 (((895851 2386042, 893897.1…\n10 440117 从化区 440000 广东省 440100 广州市 市辖区 (((921473.7 2534710, 921480…\n11 440118 增城区 440000 广东省 440100 广州市 市辖区 (((923442.3 2473232, 923443…\n\n\n我们可以使用ggplot2::geom_sf()对广州市的区县边界进行绘制：\n\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市')) +\n  theme_void()\n\n\n\n\n如果你讨厌灰色的填充颜色，也可以通过fill = NA把颜色去掉：\n\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市'),\n    fill = NA) +\n  theme_void()"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#数据类型",
    "href": "posts/spatial-map/spatial-map.html#数据类型",
    "title": "个体地址的空间绘图",
    "section": "数据类型",
    "text": "数据类型\n\n栅格数据（raster data）：一般是规整的相等面积的长方形格子。常见数据格式：.tif和.nc。\n矢量数据（vector data）：点、线、多边形（polygons）。常见数据格式：.shp。\n\n下图展示了矢量数据和栅格数据的示意图\n\n\n\n\n\n\n栅格数据示例（广州市PM\\(_{2.5}\\)浓度分布）\n\n\n\n\n\n\n\n矢量数据示例（广州市区县边界）"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#相关r包及函数",
    "href": "posts/spatial-map/spatial-map.html#相关r包及函数",
    "title": "病人地址的空间绘图",
    "section": "相关R包及函数",
    "text": "相关R包及函数\n\n矢量数据：\n\n新：sf\n旧：sp\n\n栅格数据：\n\n新：stars\n旧：raster, terra"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#栅格数据pm_2.5",
    "href": "posts/spatial-map/spatial-map.html#栅格数据pm_2.5",
    "title": "个体地址的空间绘图",
    "section": "栅格数据（PM\\(_{2.5}\\)）",
    "text": "栅格数据（PM\\(_{2.5}\\)）\n\n数据读取\n\npm_gz = read_stars('E:/China_shp/CHAP_PM2.5_Guangzhou.tif')\n\n\nggplot() +\n  geom_stars(data = pm_gz) +\n  geom_sf(data = CN_county %>% \n      filter(市 == '广州市'), fill = NA) +\n  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white') +\n  theme_void() +\n  coord_sf(crs = 4326)"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#相关r包",
    "href": "posts/spatial-map/spatial-map.html#相关r包",
    "title": "个体地址的空间绘图",
    "section": "相关R包",
    "text": "相关R包\n\n矢量数据：\n\n新：sf\n旧：sp\n\n栅格数据：\n\n新：stars\n旧：raster, terra"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#相关函数",
    "href": "posts/spatial-map/spatial-map.html#相关函数",
    "title": "个体地址的空间绘图",
    "section": "相关函数",
    "text": "相关函数\n\n读取数据\n\n矢量数据：sf::read_sf()\n栅格数据：\n\n新：stars::read_stars()\n旧：raster::raster(), terra\n\n\n\n\n数据绘图\n此处只介绍运用ggplot2图层语法进行绘图的函数\n\n矢量数据：geom_sf()\n栅格数据：geom_stars()"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#矢量图绘制",
    "href": "posts/spatial-map/spatial-map.html#矢量图绘制",
    "title": "个体地址的空间绘图",
    "section": "矢量图绘制",
    "text": "矢量图绘制\n本节以中国的矢量图边界为例，展示用R的sf和dplyr包来处理矢量地图数据（.shp文件），然后用ggplot2来绘制矢量边界地图。由于全国的所有边界数据较大，绘制时间比较久，因此大部分时间本文采用广州市的区县边界进行展示。\n\n数据位置\n\nshp_path = 'E:/China_shp'\n\n# A tibble: 5 × 2\n  path                             size\n  <fs::path>                <fs::bytes>\n1 E:/China_shp/boundary.shp       1.01M\n2 E:/China_shp/city.shp          26.35M\n3 E:/China_shp/county.shp        57.66M\n4 E:/China_shp/NineLine.shp       2.88M\n5 E:/China_shp/province.shp      23.32M\n\n\n从上到下分别是：\n\n中国国界（boundary.shp）\n中国市级边界（city.shp）\n中国区县级边界（county.shp）\n九段线（NineLine.shp）\n中国省级边界（province.shp）\n\n\n\n数据读取\n\nCN_boundary <- read_sf(here(shp_path, 'boundary.shp'))\nCN_city <- read_sf(here(shp_path, 'city.shp'))\nCN_county <- read_sf(here(shp_path, 'county.shp'))\nCN_9dash <- read_sf(here(shp_path, 'NineLine.shp'))\nCN_province <- read_sf(here(shp_path, 'province.shp'))\n\n\n\n数据清理\n这些矢量数据实际就像数据框，可以使用dplyr（dplyr::select()，mutate(), filter(), arrange()）的语法进行操作。例如，可以使用filter()选取广州市的区县边界：\n\nCN_county %>% \n  filter(市 == '广州市')\n\nSimple feature collection with 11 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 815833.3 ymin: 2383964 xmax: 925069.2 ymax: 2537977\nProjected CRS: Krasovsky_1940_Albers\n# A tibble: 11 × 8\n      PAC NAME   省代码 省     市代码 市     类型                       geometry\n *  <dbl> <chr>   <dbl> <chr>   <dbl> <chr>  <chr>            <MULTIPOLYGON [m]>\n 1 440103 荔湾区 440000 广东省 440100 广州市 市辖区 (((847866 2444953, 848089.6…\n 2 440104 越秀区 440000 广东省 440100 广州市 市辖区 (((848782.7 2445425, 849481…\n 3 440105 海珠区 440000 广东省 440100 广州市 市辖区 (((853312.2 2440874, 854128…\n 4 440106 天河区 440000 广东省 440100 广州市 市辖区 (((863466.5 2455459, 863169…\n 5 440111 白云区 440000 广东省 440100 广州市 市辖区 (((869239.4 2477347, 869252…\n 6 440112 黄埔区 440000 广东省 440100 广州市 市辖区 (((871179.3 2476068, 871272…\n 7 440113 番禺区 440000 广东省 440100 广州市 市辖区 (((876897.9 2433952, 876905…\n 8 440114 花都区 440000 广东省 440100 广州市 市辖区 (((847130 2495872, 847622.5…\n 9 440115 南沙区 440000 广东省 440100 广州市 市辖区 (((895851 2386042, 893897.1…\n10 440117 从化区 440000 广东省 440100 广州市 市辖区 (((921473.7 2534710, 921480…\n11 440118 增城区 440000 广东省 440100 广州市 市辖区 (((923442.3 2473232, 923443…\n\n\n\n\n矢量边界绘制\n我们可以使用ggplot2::geom_sf()对广州市的区县边界进行绘制：\n\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市')) +\n  theme_void()\n\n\n\n\n如果你讨厌灰色的填充颜色，也可以通过fill = NA把颜色去掉：\n\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市'),\n    fill = NA) +\n  theme_void()\n\n\n\n\n\n\n投影\nWGS84是目前最流行的地理坐标系统。在国际上，每个坐标系统都会被分配一个EPSG 代码，EPSG:4326就是WGS84 的代码。GPS是基于WGS84的，所以通常我们得到的坐标数据都是WGS84的。一般我们在存储数据时，仍然按WGS84存储。计算地理距离时也应该通过WGS84投影进行计算。\n但是如果绘图的时候使用WGS84投影，会显得靠近两极地区的面积失真。对于中国地图来说，WGS84投影非常不美观，画图来的地图像“一只强制性脊柱炎的公鸡”。因此，如果需要绘制全国地图，可以使用ESPG: 4508或者ESPG: 32649，在ggplot2中可以通过coord_sf(crs = XXXX)来设置整幅图的投影。\n\nESPG: 4326ESPG: 4326ESPG: 32649\n\n\n\nggplot() + \n  geom_sf(data = CN_province, fill = NA, size = 0.1) +\n  geom_sf(data = CN_9dash %>% \n            filter(LEFT_FID == 0)) +\n  labs(title = 'ESPG: 4326') +\n  theme_void(base_size = 14) +\n  coord_sf(crs = 4326)\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_sf(data = CN_province, fill = NA, size = 0.1) +\n  geom_sf(data = CN_9dash %>% \n            filter(LEFT_FID == 0)) +\n  labs(title = 'ESPG: 4508') +\n  theme_void(base_size = 14) +\n  coord_sf(crs = 4508)\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_sf(data = CN_province, fill = NA, size = 0.1) +\n  geom_sf(data = CN_9dash %>% \n            filter(LEFT_FID == 0)) +\n  labs(title = 'ESPG: 32649') +\n  theme_void(base_size = 14) +\n  coord_sf(crs = 32649)\n\n\n\n\n\n\n\n\n\n\ngetwd()\n\n[1] \"E:/OneDrive/Orders/test-website/Miao-blog-quarto/posts/spatial-map\""
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#矢量边界绘制",
    "href": "posts/spatial-map/spatial-map.html#矢量边界绘制",
    "title": "个体地址的空间绘图",
    "section": "矢量边界绘制",
    "text": "矢量边界绘制\n本节以中国的矢量图边界为例，展示用R的sf和dplyr包来处理矢量地图数据（.shp文件），然后用ggplot2来绘制矢量边界地图。由于全国的所有边界数据较大，绘制时间比较久，因此大部分时间本文采用广州市的区县边界进行展示。\n\n数据位置\n\nshp_path = '/data2/ShareData/MAP/China_shp'\npublic_path = '/data1/Public'\n\nfs::dir_info(shp_path) %>% \n  select(path, size) %>% \n  filter(grepl('\\\\.shp', path))\n\n# A tibble: 5 × 2\n  path                             size\n  <fs::path>                <fs::bytes>\n1 E:/China_shp/boundary.shp       1.01M\n2 E:/China_shp/city.shp          26.35M\n3 E:/China_shp/county.shp        57.66M\n4 E:/China_shp/NineLine.shp       2.88M\n5 E:/China_shp/province.shp      23.32M\n\n\n\n\n\n从上到下分别是：\n\n中国国界（boundary.shp）\n中国市级边界（city.shp）\n中国区县级边界（county.shp）\n九段线（NineLine.shp）\n中国省级边界（province.shp）\n\n\n\n矢量数据读取\n\nCN_boundary = read_sf(here(shp_path, 'boundary.shp'))\nCN_city = read_sf(here(shp_path, 'city.shp'))\nCN_county = read_sf(here(shp_path, 'county.shp'))\nCN_9dash = read_sf(here(shp_path, 'NineLine.shp'))\nCN_province = read_sf(here(shp_path, 'province.shp'))\n\n\n\n矢量数据清理\n这些矢量数据实际就像数据框，可以使用dplyr（dplyr::select()，mutate(), filter(), arrange()）的语法进行操作。例如，可以使用filter()选取广州市的区县边界：\n\nCN_county %>% \n  filter(市 == '广州市')\n\nSimple feature collection with 11 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 815833.3 ymin: 2383964 xmax: 925069.2 ymax: 2537977\nProjected CRS: Krasovsky_1940_Albers\n# A tibble: 11 × 8\n      PAC NAME   省代码 省     市代码 市     类型                       geometry\n *  <dbl> <chr>   <dbl> <chr>   <dbl> <chr>  <chr>            <MULTIPOLYGON [m]>\n 1 440103 荔湾区 440000 广东省 440100 广州市 市辖区 (((847866 2444953, 848089.6…\n 2 440104 越秀区 440000 广东省 440100 广州市 市辖区 (((848782.7 2445425, 849481…\n 3 440105 海珠区 440000 广东省 440100 广州市 市辖区 (((853312.2 2440874, 854128…\n 4 440106 天河区 440000 广东省 440100 广州市 市辖区 (((863466.5 2455459, 863169…\n 5 440111 白云区 440000 广东省 440100 广州市 市辖区 (((869239.4 2477347, 869252…\n 6 440112 黄埔区 440000 广东省 440100 广州市 市辖区 (((871179.3 2476068, 871272…\n 7 440113 番禺区 440000 广东省 440100 广州市 市辖区 (((876897.9 2433952, 876905…\n 8 440114 花都区 440000 广东省 440100 广州市 市辖区 (((847130 2495872, 847622.5…\n 9 440115 南沙区 440000 广东省 440100 广州市 市辖区 (((895851 2386042, 893897.1…\n10 440117 从化区 440000 广东省 440100 广州市 市辖区 (((921473.7 2534710, 921480…\n11 440118 增城区 440000 广东省 440100 广州市 市辖区 (((923442.3 2473232, 923443…\n\n\n类似地，也可以选取广州市各个区县的数据，如：\n\nCN_county %>% \n  filter(市 == '广州市' & NAME == '越秀区')\n\nSimple feature collection with 1 feature and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 847188.4 ymin: 2440527 xmax: 856131.5 ymax: 2447259\nProjected CRS: Krasovsky_1940_Albers\n# A tibble: 1 × 8\n     PAC NAME   省代码 省     市代码 市     类型                        geometry\n*  <dbl> <chr>   <dbl> <chr>   <dbl> <chr>  <chr>             <MULTIPOLYGON [m]>\n1 440104 越秀区 440000 广东省 440100 广州市 市辖区 (((848782.7 2445425, 849481.…\n\n\n\n\n矢量边界绘制\n我们可以使用ggplot2::geom_sf()对广州市的区县边界进行绘制：\n\n\n\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市')) +\n  theme_void()\n\n\n\n\n\n\n如果你讨厌灰色的填充颜色，也可以通过fill = NA把颜色去掉：\n\n\n\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市'),\n    fill = NA) +\n  theme_void()\n\n\n\n\n\n\n我们可以通过ggspatial::annotation_north_arrow()和ggspatial::annotation_north_arrow()分别加上指北针和标尺。具体样式可以参考相关R文档进行修改。\n\n\n\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市'),\n    fill = NA) +\n  annotation_scale( # 标尺\n    width_hint = 0.4,\n    text_cex = 1,\n    unit_category = 'metric',\n    location = 'bl') +\n  annotation_north_arrow( # 指北针\n    location = \"tl\", \n    which_north = \"true\",\n    height = unit(0.7, \"cm\"),\n    width = unit(0.7, \"cm\"),\n    pad_y = unit(0.5, \"cm\")) +\n  theme_void()\n\n\n\n\n\n\n\n\n矢量投影\nWGS84是目前最流行的地理坐标系统。在国际上，每个坐标系统都会被分配一个EPSG 代码，EPSG:4326就是WGS84 的代码。GPS是基于WGS84的，所以通常我们得到的坐标数据都是WGS84的。一般我们在存储数据时，仍然按WGS84存储。计算地理距离时也应该通过WGS84投影进行计算。\n但是如果绘图的时候使用WGS84投影，会显得靠近两极地区的面积失真。对于中国地图来说，WGS84投影非常不美观，画图来的地图像”一只强制性脊柱炎的公鸡”。因此，如果需要绘制全国地图，可以使用ESPG: 4508或者ESPG: 32649，在ggplot2中可以通过coord_sf(crs = XXXX)来设置整幅图的投影。\n对于矢量数据，可以通过sf::transform()对其投影进行转换，如：\n\n# 原始数据投影为Asia_North_Albers_Equal_Area_Conic\nhead(CN_province)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -1492657 ymin: 2089131 xmax: 1056683 ymax: 4682373\nProjected CRS: Asia_North_Albers_Equal_Area_Conic\n# A tibble: 6 × 3\n  CNAME  Name_E                                                         geometry\n  <chr>  <chr>                                                <MULTIPOLYGON [m]>\n1 安徽省 Anhui     (((578768.5 3711869, 578787.1 3711729, 578883.3 3711606, 578…\n2 澳门   Macao     (((373363.8 2308123, 373702.6 2307267, 373759.7 2307131, 374…\n3 北京市 Beijing   (((548491.6 4437692, 548534.5 4437621, 548562 4437591, 54859…\n4 福建省 Fujian    (((759764.7 2483316, 759718.8 2483296, 759692.8 2483307, 759…\n5 甘肃省 Gansu     (((-350146.9 3792524, -350199 3792482, -350290 3792537, -350…\n6 广东省 Guangdong (((12072.27 2090275, 12129.04 2090236, 12168.24 2090234, 121…\n\n# 我们将其投影为WGS84\nCN_province_4326 = st_transform(CN_province, crs = 4326)\nhead(CN_province_4326)\n\nSimple feature collection with 6 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.33783 ymin: 20.22318 xmax: 120.7244 ymax: 42.79458\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 3\n  CNAME  Name_E                                                         geometry\n  <chr>  <chr>                                                <MULTIPOLYGON [°]>\n1 安徽省 Anhui     (((116.4295 34.63088, 116.4296 34.62963, 116.4306 34.62848, …\n2 澳门   Macao     (((113.5874 22.16486, 113.5904 22.15695, 113.5909 22.1557, 1…\n3 北京市 Beijing   (((116.632 41.05889, 116.6325 41.05824, 116.6328 41.05795, 1…\n4 福建省 Fujian    (((117.4155 23.56092, 117.415 23.56077, 117.4148 23.56089, 1…\n5 甘肃省 Gansu     (((106.0713 35.44953, 106.0708 35.44915, 106.0697 35.4496, 1…\n6 广东省 Guangdong (((110.1136 20.23365, 110.1142 20.23329, 110.1146 20.23328, …\n\n\n在使用ggplot2绘图过程中，也可以通过coord_sf(crs = XXXX)对投影进行转换。\n\nESPG: 4326ESPG: 4508\n\n\n\nggplot() + \n  geom_sf(data = CN_province, fill = NA, size = 0.1) +\n  geom_sf(data = CN_9dash %>% \n            filter(LEFT_FID == 0)) +\n  labs(title = 'ESPG: 4326') +\n  theme_void(base_size = 14) +\n  coord_sf(crs = 4326)\n\n\n\n\n\n\n\n\n\n\n\n\nggplot() + \n  geom_sf(data = CN_province, fill = NA, size = 0.1) +\n  geom_sf(data = CN_9dash %>% \n            filter(LEFT_FID == 0)) +\n  labs(title = 'ESPG: 4508') +\n  theme_void(base_size = 14) +\n  coord_sf(crs = 4508)"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#栅格数据绘制",
    "href": "posts/spatial-map/spatial-map.html#栅格数据绘制",
    "title": "个体地址的空间绘图",
    "section": "栅格数据绘制",
    "text": "栅格数据绘制\n\n数据读取\n通过stars::read_stars()读取.tif文件得到的是stars数据类型，属于栅格数据类型。stars数据一般有三个维度（dimension）：x，y和band，其中x和y分别为经纬度，band则指时间维度，可将不同日期的数据整合到同一个stars对象中。除了维度之外，还包括一个属性（attribute），主要指数据变量，如空气污染和绿植覆盖。\n\npm_gz = read_stars(here(public_path, 'CHAP_PM2.5_Guangzhou.tif'))\npm_gz\n\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n                          Min. 1st Qu. Median     Mean 3rd Qu. Max. NA's\nCHAP_PM2.5_Guangzhou.tif  20.5    21.9   22.8 22.77476    23.5 30.7 8557\ndimension(s):\n  from  to  offset delta refsys point values x/y\nx    1 109 112.962  0.01 WGS 84 FALSE   NULL [x]\ny    1 136 23.9297 -0.01 WGS 84 FALSE   NULL [y]\n\n\n此处的样例数据因为是单天的数据，因此只有两个维度（x和y），没有band的维度。数据的属性为CHAP_PM2.5_Guangzhou，并且报告了其简单的统计量（最小值、最大值、均值、缺失值数量以及四分位数）。每个维度都有一个名字（如x和y），每个维度的域的含义分别为：\n\n\n\n域\n含义\n\n\n\n\nfrom\n原点\n\n\nto\n终点的索引\n\n\noffset\n此维度起始点的值\n\n\ndelta\n此维度网格的大小\n\n\nrefsys\n投影系统\n\n\npoint\n逻辑值，TRUE代表点，FALSE代表区间\n\n\nvalues\n此维度的值\n\n\n\n对于某个维度第i处的坐标为offset + (i - 1)*delta， 此值对应的是该栅格或区间的起始点。如果想得到该栅格或区间的中间点，则需额外加上0.5倍的offset。\nstars数据类型也可以通过dplyr包中的函数进行清理和转换。由于内容较多，此处不再详述，有兴趣的读者可以参考官方手册：\n\nstars tidyverse methods\n\n\n\n栅格数据清理\nstars数据是cubelyr包中tbl_cube类型的一般化形式，我们可以通过cubelyr::as.tbl_cube()函数进行转换：\n\npm_gz_cube = as.tbl_cube(pm_gz)\npm_gz_cube\n\nSource: local array [14,824 x 2]\nD: x [dbl, 109]\nD: y [dbl, 136]\nM: CHAP_PM2.5_Guangzhou.tif [dbl[,136]]\n\nstr(pm_gz_cube)\n\nList of 2\n $ dims:List of 2\n  ..$ x: num [1:109] 113 113 113 113 113 ...\n  ..$ y: num [1:136] 23.9 23.9 23.9 23.9 23.9 ...\n $ mets:List of 1\n  ..$ CHAP_PM2.5_Guangzhou.tif: num [1:109, 1:136] NA NA NA NA NA NA NA NA NA NA ...\n - attr(*, \"class\")= chr \"tbl_cube\"\n\n\n另外，我们也可以将其转换成data.frame以方便后续的操作，如双线性插值等。\n\npm_gz_tbl = as_tibble(pm_gz)\nstr(pm_gz_tbl)\n\ntibble [14,824 × 3] (S3: tbl_df/tbl/data.frame)\n $ x                       : num [1:14824] 113 113 113 113 113 ...\n $ y                       : num [1:14824] 23.9 23.9 23.9 23.9 23.9 ...\n $ CHAP_PM2.5_Guangzhou.tif: num [1:14824] NA NA NA NA NA NA NA NA NA NA ...\n\n\n\n\n栅格数据绘制\n我们可以通过ggplot2中的geom_stars()对stars数据进行绘制。\n\n\n\nggplot() +\n  geom_stars(data = pm_gz) +\n  scale_fill_viridis(\n    option = 'A', \n    direction = -1, \n    na.value = 'white', \n    breaks = 20:29) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  guides(fill = guide_coloursteps( \n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(0.7, \"cm\"),\n      barheight = unit(7, \"cm\"))) +\n  theme_void(base_size = 16) +\n  coord_sf(crs = 4326)"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#栅格和矢量数据混合绘制",
    "href": "posts/spatial-map/spatial-map.html#栅格和矢量数据混合绘制",
    "title": "个体地址的空间绘图",
    "section": "栅格和矢量数据混合绘制",
    "text": "栅格和矢量数据混合绘制\n单纯的栅格数据比较单调，缺少行政边界信息。通过ggplot2的图层，我们可以轻松地加上矢量边界信息。\n\nggplot() +\n  geom_stars(data = pm_gz) +\n  geom_sf(data = CN_county %>% \n      filter(市 == '广州市'), fill = NA) +\n  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white') +\n  theme_void() +\n  coord_sf(crs = 4326)\n\n\n\n\n\n# Convert from raster to sf polygons\npm_gz_sf = st_as_sf(pm_gz, as_points = FALSE, merge = FALSE)\n\nggplot() +\n  geom_sf(data = pm_gz_sf, aes(fill = CHAP_PM2.5_Guangzhou.tif), color = 'white', size = 0.1) +\n  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white', breaks = 20:30) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  guides(fill = guide_coloursteps( # guide_colourbar\n      title.position = \"top\",\n      title.theme = element_text(size = 16),\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(0.7, \"cm\"),\n      barheight = unit(7, \"cm\"),\n      ticks = FALSE,\n      ticks.colour = 'white',\n      ticks.linewidth = 1.5)) +\n  theme_void(base_size = 16) +\n  coord_sf(crs = 4326)\nggsave('raster-data-example.png', width = 6, height = 6)\n\n\nggplot() +\n  geom_sf(data = CN_county %>% \n      filter(市 == '广州市'), fill = NA) +\n  theme_void() +\n  coord_sf(crs = 4326)\nggsave('vector-data-example.png', width = 6, height = 6)"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#矢量和栅格数据相互转换",
    "href": "posts/spatial-map/spatial-map.html#矢量和栅格数据相互转换",
    "title": "个体地址的空间绘图",
    "section": "矢量和栅格数据相互转换",
    "text": "矢量和栅格数据相互转换\n\n矢量 \\(\\rightarrow\\) 等面积格子\n我们可以通过sf::st_make_grid()函数将行政边界转换成相等大小的格子，类似栅格数据。\n\n\n\ngz_rect = CN_city %>% \n  filter(市 == '广州市') %>% \n  st_transform(crs = 4326) %>% \n  st_make_grid(cellsize = c(0.05, 0.05))\n\nggplot() + \n  geom_sf(data = gz_rect, \n          fill = NA, \n          size = 0.1) +\n  geom_sf(data = CN_county %>% \n            filter(市 == '广州市'), \n          fill = '#08519c', \n          alpha = 0.5, \n          size = 0.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n上图中规整的正方形格子（矢量边界）为sf::st_make_grid()转换后的数据，蓝色填充的多边形为广州市区县边界。\n需要注意的是，此时的格子gz_rect并非完美覆盖广州市的边界，而是能够环绕广州市边界的矩形，其面积大于广州市面积，包含不少不属于广州市的小格子（见图中）。我们可以用过sf::st_intersection()函数来保留只属于广州的小格子。\n\n\n\ngz_grids = st_intersection(\n  gz_rect, \n  CN_city %>% \n    filter(市 == '广州市') %>% \n    st_transform(crs = 4326))\n\nggplot() + \n  geom_sf(\n    data = gz_grids, \n    fill = NA) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n栅格 \\(\\rightarrow\\) 矢量\n由于广州市1km*1km的格子太多，不利于看清本文中天秀的操作，所以此小节中以中山大学南校区所在的海珠区为例进行展示。\n\nhaizhu_pm_2.5 = read_stars(here(public_path, 'Haizhu_Guangzhou_PM2.5.tif'))\nhaizhu_pm_2.5\n\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n                            Min. 1st Qu. Median     Mean 3rd Qu. Max. NA's\nHaizhu_Guangzhou_PM2.5.tif  21.9    22.6   22.9 23.23671   23.85 25.8   73\ndimension(s):\n  from to  offset delta refsys point values x/y\nx    1 19 113.232  0.01 WGS 84 FALSE   NULL [x]\ny    1  8 23.1197 -0.01 WGS 84 FALSE   NULL [y]\n\n\n此处读入的数据haizhu_pm_2.5为stars格式的栅格数据，接下来我们可以通过st_as_sf()函数将stars数据转换成规整的矢量多边形（其实是正四边形）数据：\n\npm_haizhu_sf = st_as_sf(haizhu_pm_2.5, as_points = FALSE, merge = FALSE)\nhead(pm_haizhu_sf)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 113.2422 ymin: 23.0997 xmax: 113.2922 ymax: 23.1197\nGeodetic CRS:  WGS 84\n  Haizhu_Guangzhou_PM2.5.tif                       geometry\n1                       24.6 POLYGON ((113.2622 23.1197,...\n2                       25.2 POLYGON ((113.2422 23.1097,...\n3                       25.8 POLYGON ((113.2522 23.1097,...\n4                       24.7 POLYGON ((113.2622 23.1097,...\n5                       24.0 POLYGON ((113.2722 23.1097,...\n6                       23.7 POLYGON ((113.2822 23.1097,...\n\n\n我们可以通过绘图展示转换后的矢量多边形数据。此处我有意用color = 'white'加上栅格格子的边界，只用于提醒这里是规则格子的矢量多边形，而不是栅格数据。其实细心地读者可以发现这里用的是geom_sf()，因此绘图的对象为矢量多边形数据，而并非栅格数据（栅格数据应该用geom_stars()进行绘制）。海珠区的行政边界我用鲜艳的红色标出。\n\n\n\nggplot() + \n  geom_sf(data = pm_haizhu_sf, \n          fill = '#08519c',\n          color = 'white',\n          size = 0.2) +\n  geom_sf(data = CN_county %>% \n    filter(NAME == '海珠区') %>% \n    st_transform(crs = 4326),\n    fill = NA, size = 1, color = 'red') +\n  theme_void()\n\n\n\n\n\n\n\n\n\n我们也可以在geom_sf()中设置fill的参数来绘制PM\\(_{2.5}\\)，注意需要在geom_sf()的aes中设置。\n\n错误：geom_sf(data = XX, fill = PM2.5)\n正确：geom_sf(data = XX, aes(fill = PM2.5))\n\n\n\n\nggplot() + \n  geom_sf(\n    data = pm_haizhu_sf, \n    aes(fill = Haizhu_Guangzhou_PM2.5.tif),\n    color = 'white', size = 0.2) +\n  geom_sf(data = CN_county %>% \n    filter(NAME == '海珠区') %>% \n    st_transform(crs = 4326),\n    fill = NA, size = 1, color = 'red') +\n  scale_fill_viridis(\n    option = 'A', direction = -1, \n    na.value = 'white',  breaks = 20:30) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  theme_void(base_size = 16)\n\n\n\n\n\n\n\n\n\n我们也可以在geom_sf()中设置color = NA来去掉白色的边界。注意，由于不涉及任何数据框中的变量，因此不是在aes()中设置。\n去掉白色的边界后图如下所示，生成的图与使用geom_stars()和栅格数据画出来的图像一模一样。\n\n\n\nggplot() + \n  geom_sf(\n    data = pm_haizhu_sf, \n    aes(fill = Haizhu_Guangzhou_PM2.5.tif),\n    color = NA) +\n  geom_sf(data = CN_county %>% \n    filter(NAME == '海珠区') %>% \n    st_transform(crs = 4326),\n    fill = NA, size = 1, color = 'red') +\n  scale_fill_viridis(\n    option = 'A', direction = -1, \n    na.value = 'white',  breaks = 20:30) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  theme_void(base_size = 16)"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#sf-points",
    "href": "posts/spatial-map/spatial-map.html#sf-points",
    "title": "个体地址的空间绘图",
    "section": "sf points",
    "text": "sf points"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#sample-from-multivariate-normal-distributions",
    "href": "posts/spatial-map/spatial-map.html#sample-from-multivariate-normal-distributions",
    "title": "个体地址的空间绘图",
    "section": "sample from multivariate normal distributions",
    "text": "sample from multivariate normal distributions\n\nn_obs = 5*10^3\n\nsigma <- matrix(c(1, 1, 1, 1), 2, 2)\n\nvar_comp = MASS::mvrnorm(n = n_obs, rep(0, 2), sigma) %>% \n  as.data.frame()\ncolnames(var_comp) = c('var1', 'var2')\n\nsysu = tibble(\n    lat = c(23.128, 23.09, 23.13, 23.10, 23.23, 23.11),\n    lon = c(113.289, 113.29, 113.32, 113.33, 113.22, 113.42)) %>% \n  slice(sample(1:n(), n_obs, replace = T)) %>% \n  bind_cols(var_comp) %>% \n  mutate(lat = lat + var1,\n         lon = lon + var1)\n\n\nsysu_sf = sysu %>% \n  st_as_sf(coords = c(\"lon\", \"lat\"), crs = 4326) %>% \n  mutate(intersection = geometry %>% \n           st_intersects(\n             CN_city %>% \n               filter(市 == '广州市') %>% \n               st_transform(crs = 4326)) %>% \n           as.character()) %>% \n  filter(intersection == 1)\n\nggplot() + \n  geom_sf(\n    data = CN_county %>% \n      filter(市 == '广州市'), fill = NA) +\n  geom_sf(data = sysu_sf, size = 1, alpha = 0.2) +\n  theme_void()"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#基于矢量边界选出栅格数据",
    "href": "posts/spatial-map/spatial-map.html#基于矢量边界选出栅格数据",
    "title": "个体地址的空间绘图",
    "section": "基于矢量边界选出栅格数据",
    "text": "基于矢量边界选出栅格数据\n在上述海珠区的操作中，我们是直接读取已经与处理好的海珠区的PM\\(_{2.5}\\)的栅格数据。此部分将展示如何基于矢量边界来裁剪栅格数据。\n以广州为例，如果我们想选出中山大学公卫学院所在的越秀区的PM\\(_{2.5}\\)浓度的栅格数据，我们需要首先选出越秀区的矢量行政边界：\n\nyuexiu_sf = CN_county %>% \n  filter(NAME == '越秀区') %>% \n  st_transform(crs = 4326)\n\n然后我们可以使用st_crop()来对栅格数据进行裁剪。语法为st_crop(x, y)，其中x为栅格数据，y为矢量边界数据\n\nyuexiu_pm2.5 = st_crop(pm_gz, yuexiu_sf)\nyuexiu_pm2.5\n\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n                          Min. 1st Qu. Median     Mean 3rd Qu. Max. NA's\nCHAP_PM2.5_Guangzhou.tif  21.7   22.55     23 23.10323   23.75 24.9   41\ndimension(s):\n  from to  offset delta refsys point values x/y\nx   28 36 112.962  0.01 WGS 84 FALSE   NULL [x]\ny   76 83 23.9297 -0.01 WGS 84 FALSE   NULL [y]\n\n\n然后我们可将越秀区PM\\(_{2.5}\\)浓度的栅格数据与矢量边界数据画出：\n\n\n\nggplot() +\n  geom_stars(data = yuexiu_pm2.5) +\n  geom_sf(data = yuexiu_sf, fill = NA) +\n  scale_fill_viridis(\n    option = 'A', direction = -1, \n    na.value = 'white', \n    breaks = seq(20, 25, 0.5)) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$'),\n       title = 'Yuexiu district') +\n  guides(fill = guide_coloursteps(\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(0.7, \"cm\"),\n      barheight = unit(7, \"cm\"))) +\n  theme_void(base_size = 16) +\n  coord_sf(crs = 4326)"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#矢量和栅格数据交互处理",
    "href": "posts/spatial-map/spatial-map.html#矢量和栅格数据交互处理",
    "title": "个体地址的空间绘图",
    "section": "矢量和栅格数据交互处理",
    "text": "矢量和栅格数据交互处理\n\n栅格和矢量数据混合绘制\n单纯的栅格数据比较单调，缺少行政边界信息。通过ggplot2的图层，我们可以轻松地加上矢量边界信息。\n\n\n\nggplot() +\n  geom_stars(data = pm_gz) +\n  geom_sf(data = CN_county %>% \n      filter(市 == '广州市'), fill = NA) +\n  scale_fill_viridis(\n    option = 'A', \n    direction = -1, \n    na.value = 'white', \n    breaks = 20:29) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  guides(fill = guide_coloursteps( \n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(0.7, \"cm\"),\n      barheight = unit(7, \"cm\"))) +\n  theme_void(base_size = 16) +\n  coord_sf(crs = 4326)\n\n\n\n\n\n\n\n\n\n\n\n矢量 \\(\\rightarrow\\) 等面积格子\n我们可以通过sf::st_make_grid()函数将行政边界转换成相等大小的格子，类似栅格数据。\n\n\n\ngz_rect = CN_city %>% \n  filter(市 == '广州市') %>% \n  st_transform(crs = 4326) %>% \n  st_make_grid(cellsize = c(0.05, 0.05))\n\nggplot() + \n  geom_sf(data = gz_rect, \n          fill = NA, \n          size = 0.1) +\n  geom_sf(data = CN_county %>% \n            filter(市 == '广州市'), \n          fill = '#08519c', \n          alpha = 0.5, \n          size = 0.5) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n上图中规整的正方形格子（矢量边界）为sf::st_make_grid()转换后的数据，蓝色填充的多边形为广州市区县边界。\n需要注意的是，此时的格子gz_rect并非完美覆盖广州市的边界，而是能够环绕广州市边界的矩形，其面积大于广州市面积，包含不少不属于广州市的小格子（见图中）。我们可以用过sf::st_intersection()函数来保留只属于广州的小格子。\n\n\n\ngz_grids = st_intersection(\n  gz_rect, \n  CN_city %>% \n    filter(市 == '广州市') %>% \n    st_transform(crs = 4326))\n\nggplot() + \n  geom_sf(\n    data = gz_grids, \n    fill = NA) +\n  theme_void()\n\n\n\n\n\n\n\n\n\nFigure 1: 广州市5*5km矢量格子\n\n\n\n\n\n\n栅格 \\(\\rightarrow\\) 矢量\n由于广州市1km*1km的格子太多，不利于看清本文中天秀的操作，所以此小节中以中山大学南校区所在的海珠区为例进行展示。\n\nhaizhu_pm_2.5 = read_stars(here(public_path, 'Haizhu_Guangzhou_PM2.5.tif'))\nhaizhu_pm_2.5\n\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n                            Min. 1st Qu. Median     Mean 3rd Qu. Max. NA's\nHaizhu_Guangzhou_PM2.5.tif  21.9    22.6   22.9 23.23671   23.85 25.8   73\ndimension(s):\n  from to  offset delta refsys point values x/y\nx    1 19 113.232  0.01 WGS 84 FALSE   NULL [x]\ny    1  8 23.1197 -0.01 WGS 84 FALSE   NULL [y]\n\n\n此处读入的数据haizhu_pm_2.5为stars格式的栅格数据，接下来我们可以通过st_as_sf()函数将stars数据转换成规整的矢量多边形（其实是正四边形）数据：\n\npm_haizhu_sf = st_as_sf(haizhu_pm_2.5, as_points = FALSE, merge = FALSE)\nhead(pm_haizhu_sf)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 113.2422 ymin: 23.0997 xmax: 113.2922 ymax: 23.1197\nGeodetic CRS:  WGS 84\n  Haizhu_Guangzhou_PM2.5.tif                       geometry\n1                       24.6 POLYGON ((113.2622 23.1197,...\n2                       25.2 POLYGON ((113.2422 23.1097,...\n3                       25.8 POLYGON ((113.2522 23.1097,...\n4                       24.7 POLYGON ((113.2622 23.1097,...\n5                       24.0 POLYGON ((113.2722 23.1097,...\n6                       23.7 POLYGON ((113.2822 23.1097,...\n\n\n我们可以通过绘图展示转换后的矢量多边形数据。此处我有意用color = 'white'加上栅格格子的边界，只用于提醒这里是规则格子的矢量多边形，而不是栅格数据。其实细心地读者可以发现这里用的是geom_sf()，因此绘图的对象为矢量多边形数据，而并非栅格数据（栅格数据应该用geom_stars()进行绘制）。海珠区的行政边界我用鲜艳的红色标出。\n\n\n\nggplot() + \n  geom_sf(data = pm_haizhu_sf, \n          fill = '#08519c',\n          color = 'white',\n          size = 0.2) +\n  geom_sf(data = CN_county %>% \n    filter(NAME == '海珠区') %>% \n    st_transform(crs = 4326),\n    fill = NA, size = 1, color = 'red') +\n  theme_void()\n\n\n\n\n\n\n\n\n\n我们也可以在geom_sf()中设置fill的参数来绘制PM\\(_{2.5}\\)，注意需要在geom_sf()的aes中设置。\n\n错误：geom_sf(data = XX, fill = PM2.5)\n正确：geom_sf(data = XX, aes(fill = PM2.5))\n\n在aes()里面或外面的规则是：如果需要绘制特征随着数据框里面的变量变化而变化，则应该放在aes()里面；如果不涉及任何数据框中的变量，则应该在aes()外面。\n\n\n\nggplot() + \n  geom_sf(\n    data = pm_haizhu_sf, \n    aes(fill = Haizhu_Guangzhou_PM2.5.tif),\n    color = 'white', size = 0.2) +\n  geom_sf(data = CN_county %>% \n    filter(NAME == '海珠区') %>% \n    st_transform(crs = 4326),\n    fill = NA, size = 1, color = 'red') +\n  scale_fill_viridis(\n    option = 'A', direction = -1, \n    na.value = 'white',  breaks = 20:30) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  theme_void(base_size = 16)\n\n\n\n\n\n\n\n\n\n我们也可以在geom_sf()中设置color = NA来去掉白色的边界。注意，由于不涉及任何数据框中的变量，因此不是在aes()中设置。\n去掉白色的边界后图如下所示，生成的图与使用geom_stars()和栅格数据画出来的图像一模一样。\n\n\n\nggplot() + \n  geom_sf(\n    data = pm_haizhu_sf, \n    aes(fill = Haizhu_Guangzhou_PM2.5.tif),\n    color = NA) +\n  geom_sf(data = CN_county %>% \n    filter(NAME == '海珠区') %>% \n    st_transform(crs = 4326),\n    fill = NA, size = 1, color = 'red') +\n  scale_fill_viridis(\n    option = 'A', direction = -1, \n    na.value = 'white',  breaks = 20:30) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +\n  theme_void(base_size = 16)\n\n\n\n\n\n\n\n\n\n\n\n基于矢量边界选出栅格数据\n在上述海珠区的操作中，我们是直接读取已经与处理好的海珠区的PM\\(_{2.5}\\)的栅格数据。此部分将展示如何基于矢量边界来裁剪栅格数据。\n以广州为例，如果我们想选出中山大学公卫学院所在的越秀区的PM\\(_{2.5}\\)浓度的栅格数据，我们需要首先选出越秀区的矢量行政边界：\n\nyuexiu_sf = CN_county %>% \n  filter(NAME == '越秀区') %>% \n  st_transform(crs = 4326)\n\n然后我们可以使用st_crop()来对栅格数据进行裁剪。语法为st_crop(x, y)，其中x为栅格数据，y为矢量边界数据\n\nyuexiu_pm2.5 = st_crop(pm_gz, yuexiu_sf)\nyuexiu_pm2.5\n\nstars object with 2 dimensions and 1 attribute\nattribute(s):\n                          Min. 1st Qu. Median     Mean 3rd Qu. Max. NA's\nCHAP_PM2.5_Guangzhou.tif  21.7   22.55     23 23.10323   23.75 24.9   41\ndimension(s):\n  from to  offset delta refsys point values x/y\nx   28 36 112.962  0.01 WGS 84 FALSE   NULL [x]\ny   76 83 23.9297 -0.01 WGS 84 FALSE   NULL [y]\n\n\n然后我们可将越秀区PM\\(_{2.5}\\)浓度的栅格数据与矢量边界数据画出：\n\n\n\nggplot() +\n  geom_stars(data = yuexiu_pm2.5) +\n  geom_sf(data = yuexiu_sf, fill = NA) +\n  scale_fill_viridis(\n    option = 'A', direction = -1, \n    na.value = 'white', \n    breaks = seq(20, 25, 0.5)) +\n  labs(fill = latex2exp::TeX('PM$_{2.5}$'),\n       title = 'Yuexiu district') +\n  guides(fill = guide_coloursteps(\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(0.7, \"cm\"),\n      barheight = unit(7, \"cm\"))) +\n  theme_void(base_size = 16) +\n  coord_sf(crs = 4326)\n\n\n\n\n\n\n\n\n\n广州市越秀区PM\\(_{2.5}\\)栅格数据分布及行政边界\n\n\n\n\n相对于用sf::st_make_grid()函数和矢量边界裁剪出来的格子（Figure 1），这里的格子均为正方形，而且在行政边界附近显得有些参差不齐。这是因为栅格数据一般必须为正方形或长方形，无法变成不规则的多边形，而在矢量数据中则可以通过边界裁剪变成不规则的多边形。\n另外在边界附近有些格子存在，而有些格子不存在，看起来似乎没有统一的规则。但是实际上用st_crop()的时候是有规则地筛选：默认会保留那些在矢量边界内部面积大于单个栅格面积一半的格子，而如果在矢量边界内部的面小于单个栅格面积一半，则不会被保留。"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#地址分布网格图",
    "href": "posts/spatial-map/spatial-map.html#地址分布网格图",
    "title": "个体地址的空间绘图",
    "section": "地址分布网格图",
    "text": "地址分布网格图\n\n转换为矢量点\n首先需要把经纬度的点转换成sf矢量点的数据，可以通过sf::st_as_sf()函数来实现\n\ngz_point_sf = st_as_sf(gz_point_df, coords = c(\"X\", \"Y\"), crs = 4326)\ngz_point_sf\n\nSimple feature collection with 16402 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 109.2282 ymin: 20.26657 xmax: 115.7887 ymax: 26.07937\nGeodetic CRS:  WGS 84\n# A tibble: 16,402 × 1\n              geometry\n *         <POINT [°]>\n 1 (113.4126 23.11747)\n 2 (113.4125 23.11745)\n 3 (113.6053 23.28193)\n 4 (113.4459 22.78224)\n 5 (113.4459 22.78224)\n 6 (113.3854 23.11756)\n 7 (113.4597 22.92131)\n 8 (113.4054 23.10063)\n 9 (113.4054 23.10063)\n10 (113.4054 23.10063)\n# … with 16,392 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\n\n\n筛选广州内的点\n然后需要需要筛选出落在广州市内部的点，可以通过sf::st_filter(A, B)来实现，其中A为矢量点数据，B是矢量多边形边界数据。特别需要注意的是，需要保证A和B的投影保持一致，基于前述关于经纬度的解释，建议保持A和B的投影均为WGS84，即ESPG:4326。\n\ngz_poly_sf = CN_city %>% \n  filter(市 == '广州市') %>% \n  st_transform(crs = 4326)\n\ngz_point_sf_within = st_filter(\n  gz_point_sf, \n  gz_poly_sf)\n\ngz_point_sf_within\n\nSimple feature collection with 15446 features and 0 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 112.9677 ymin: 22.5888 xmax: 114.0157 ymax: 23.90779\nGeodetic CRS:  WGS 84\n# A tibble: 15,446 × 1\n              geometry\n *         <POINT [°]>\n 1 (113.4126 23.11747)\n 2 (113.4125 23.11745)\n 3 (113.6053 23.28193)\n 4 (113.4459 22.78224)\n 5 (113.4459 22.78224)\n 6 (113.3854 23.11756)\n 7 (113.4597 22.92131)\n 8 (113.4054 23.10063)\n 9 (113.4054 23.10063)\n10 (113.4054 23.10063)\n# … with 15,436 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\n\n\n创造广州市内的格子\n如前述“矢量 \\(\\rightarrow\\) 等面积格子”中介绍过，我们可以通过st_make_grid()生成均匀的正方形格子，然后st_intersection裁剪广州市内的格子。\n\ngz_square_sf = gz_poly_sf %>% \n  st_make_grid(cellsize = c(0.025, 0.025)) %>% \n  st_intersection(gz_poly_sf) %>% \n  st_as_sf()\ngz_square_sf\n\nSimple feature collection with 1164 features and 0 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 112.9532 ymin: 22.5628 xmax: 114.0545 ymax: 23.93597\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                                x\n1  MULTIPOLYGON (((113.6282 22...\n2  MULTIPOLYGON (((113.6532 22...\n3  POLYGON ((113.6563 22.58149...\n4  POLYGON ((113.6944 22.5878,...\n5  POLYGON ((113.5782 22.60264...\n6  POLYGON ((113.6032 22.60223...\n7  POLYGON ((113.6179 22.5878,...\n8  MULTIPOLYGON (((113.6442 22...\n9  MULTIPOLYGON (((113.6782 22...\n10 POLYGON ((113.6884 22.6128,...\n\n\n\n\n计算格子内人数\n可以通过st_intersects()来计算每个格子中的人数\n\ngz_intersect = st_intersects(gz_square_sf, gz_point_sf_within) %>% \n  lengths()\nstr(gz_intersect)\n\n int [1:1164] 0 0 0 0 0 0 3 2 1 0 ...\n\n\n此处gz_intersect的长度为1164，刚好是我们前面生成的广州市5*5格子（gz_square_sf）的数量。\n\n\n准备绘图数据\n我们可以通过dplyr::mutate()函数将这个计数变量加在gz_square_sf这个数据上，用于ggplot2的绘图。\n\ngz_square_sf_count = gz_square_sf %>% \n  mutate(count = gz_intersect)\ngz_square_sf_count\n\nSimple feature collection with 1164 features and 1 field\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 112.9532 ymin: 22.5628 xmax: 114.0545 ymax: 23.93597\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                                x count\n1  MULTIPOLYGON (((113.6282 22...     0\n2  MULTIPOLYGON (((113.6532 22...     0\n3  POLYGON ((113.6563 22.58149...     0\n4  POLYGON ((113.6944 22.5878,...     0\n5  POLYGON ((113.5782 22.60264...     0\n6  POLYGON ((113.6032 22.60223...     0\n7  POLYGON ((113.6179 22.5878,...     3\n8  MULTIPOLYGON (((113.6442 22...     2\n9  MULTIPOLYGON (((113.6782 22...     1\n10 POLYGON ((113.6884 22.6128,...     0\n\n\n\n\n绘图\n\n\n\nggplot() +\n  geom_sf(data = gz_square_sf_count, \n          aes(fill = count), \n          color = 'gray70', size = 0.15) +\n  scale_fill_continuous(\n    type = \"viridis\", \n    option = 'A', \n    direction = -1, \n    guide = guide_colorsteps(\n      title = 'Count',\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(1, \"cm\"),\n      barheight = unit(6, \"cm\"))) +\n  labs(fill = 'count') +\n  theme_void(base_size = 16)\n\n\n\n\n\n\n\n\n\n此处的颜色分布过于单一（个别格子的值过大），看不出太多的空间分布特征，我们可以通过对count变量进行排序进行初步验证：\n\ngz_square_sf_count %>% \n  arrange(-count) %>% \n  print(n = 10)\n\nSimple feature collection with 1164 features and 1 field\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 112.9532 ymin: 22.5628 xmax: 114.0545 ymax: 23.93597\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   count                              x\n1   4178 POLYGON ((113.8782 23.3878,...\n2   1214 POLYGON ((113.4032 23.0878,...\n3   1166 POLYGON ((113.4032 23.1128,...\n4    507 POLYGON ((113.4282 23.0878,...\n5    420 POLYGON ((113.3532 23.0878,...\n6    312 POLYGON ((113.5532 23.1878,...\n7    279 POLYGON ((113.3782 23.1128,...\n8    210 POLYGON ((113.4032 23.0628,...\n9    195 POLYGON ((113.3782 23.0878,...\n10   151 POLYGON ((113.4532 23.5878,...\n\n\n我们可以通过limits和oob参数设定来修改配色范围，并且通过breaks和labels参数设定来修改图例，使得配色更好看，图例也更合理。代码及样图展示如下\n\n\n\nggplot() +\n  geom_sf(data = gz_square_sf_count, \n          aes(fill = count), \n          color = 'gray70', size = 0.15) +\n  scale_fill_continuous(\n    type = \"viridis\", \n    option = 'A', \n    direction = -1, \n    limits = c(0, 120), \n    oob = scales::squish,\n    breaks = seq(0, 120, 20), \n    labels = ~ ifelse(.x < 120, .x, '>120'),\n    guide = guide_colorsteps(\n      title = 'Count',\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(1, \"cm\"),\n      barheight = unit(6, \"cm\"))) +\n  labs(fill = 'count') +\n  theme_void(base_size = 16)\n\n\n\n\n\n\n\n\n\n也可以加上市和区县边界，可以显得更美观：\n\n\n\nggplot() +\n  geom_sf(data = gz_square_sf_count, \n          aes(fill = count), \n          color = 'gray80', size = 0.15) +\n  geom_sf(data = CN_county %>%\n            filter(市 == '广州市'),\n          fill = NA, color = 'gray40', size = 0.3) +\n  geom_sf(data = CN_city %>%\n            filter(市 == '广州市'),\n          fill = NA, color = 'gray50', size = 0.5) +\n  scale_fill_continuous(\n    type = \"viridis\", \n    option = 'A', \n    direction = -1, \n    limits = c(0, 120), \n    oob = scales::squish,\n    breaks = seq(0, 120, 20), \n    labels = ~ ifelse(.x < 120, .x, '>120'),\n    guide = guide_colorsteps(\n      title = 'Count',\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(1, \"cm\"),\n      barheight = unit(6, \"cm\"))) +\n  labs(fill = 'count') +\n  theme_void(base_size = 16)"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#地址分布点图",
    "href": "posts/spatial-map/spatial-map.html#地址分布点图",
    "title": "个体地址的空间绘图",
    "section": "地址分布点图",
    "text": "地址分布点图\n使用分布点绘图的原理类似于地址分布网格图，但是其数据聚合方法是基于经纬度，而不是基于地理分布边界。数据点非常多的时候，用点图来展示地址分布一般更美观，因为其空间精度更高。\n\n经纬度点计数\n数据的预处理（转换成矢量点和筛选广州市内的点）步骤跟前述一致，此处不再重复叙述，我们直接从预处理好的数据gz_point_sf_within开始，可以通过st_coordinates()将sf points转换成包含经纬度坐标的数据框：\n\ngz_point_sf_within %>% \n  st_coordinates() %>% \n  head()\n\n         X        Y\n1 113.4126 23.11747\n2 113.4125 23.11745\n3 113.6053 23.28193\n4 113.4459 22.78224\n5 113.4459 22.78224\n6 113.3854 23.11756\n\n\n由于本数据的经纬度十分精细，对原始数据经纬度的计数过于精细，绘图时会重叠过多效果不佳。因此可将经纬度四舍五入到小数点后2位（大约为1km的精度），再对经纬度进行计数：\n\ngz_point_count = gz_point_sf_within %>% \n  st_coordinates() %>% \n  as_tibble() %>% \n  mutate(X = round(X, 2),\n         Y = round(Y, 2)) %>% \n  count(X, Y)\n\ngz_point_count\n\n# A tibble: 1,095 × 3\n       X     Y     n\n   <dbl> <dbl> <int>\n 1  113.  23.4     1\n 2  113.  23.4     3\n 3  113.  23.4     2\n 4  113.  23.4     8\n 5  113.  23.3     8\n 6  113.  23.4    15\n 7  113.  23.4     1\n 8  113.  23.3     3\n 9  113.  23.3     1\n10  113.  23.3     2\n# … with 1,085 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\n\n\n计数的经纬度转换成空间点\n\ngz_point_count_sf = st_as_sf(\n    gz_point_count, \n    coords = c('X', 'Y'), \n    crs = 4326) %>% \n  arrange(n)\ngz_point_count_sf\n\nSimple feature collection with 1095 features and 1 field\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 112.97 ymin: 22.59 xmax: 114.02 ymax: 23.91\nGeodetic CRS:  WGS 84\n# A tibble: 1,095 × 2\n       n       geometry\n   <int>    <POINT [°]>\n 1     1 (112.97 23.45)\n 2     1 (113.04 23.41)\n 3     1 (113.05 23.28)\n 4     1 (113.05 23.31)\n 5     1 (113.05 23.43)\n 6     1 (113.05 23.46)\n 7     1 (113.06 23.28)\n 8     1 (113.06 23.37)\n 9     1 (113.07 23.31)\n10     1 (113.07 23.39)\n# … with 1,085 more rows\n# ℹ Use `print(n = ...)` to see more rows\n\n\n\n\n绘图\n\n\n\nggplot() +\n  geom_sf(data = CN_county %>%\n            filter(市 == '广州市'),\n          fill = NA, color = 'gray40', size = 0.2) +\n  geom_sf(data = gz_point_count_sf, \n          aes(color = n), shape = 19, size = 1.5) +\n    geom_sf(data = CN_city %>%\n            filter(市 == '广州市'),\n          fill = NA, color = 'gray50', size = 0.6) +\n  scale_color_continuous(\n    type = \"viridis\", \n    option = 'A', \n    direction = -1, \n    limits = c(0, 120), \n    oob = scales::squish,\n    breaks = seq(0, 120, 20), \n    labels = ~ ifelse(.x < 120, .x, '>120'),\n    guide = guide_colorsteps(\n      title = 'Count',\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(1, \"cm\"),\n      barheight = unit(6, \"cm\"))) +\n  labs(fill = 'count') +\n  theme_void(base_size = 16)\n\n\n\n\n\n\n\n\n\n将广州市内的背景换成灰色\n\n\n\nggplot() +\n  geom_sf(data = CN_county %>%\n            filter(市 == '广州市'),\n          fill = 'gray80', color = 'gray40', size = 0.2) +\n  geom_sf(data = gz_point_count_sf, \n          aes(color = n), shape = 19, size = 1.5) +\n    geom_sf(data = CN_city %>%\n            filter(市 == '广州市'),\n          fill = NA, color = 'gray50', size = 0.6) +\n  scale_color_continuous(\n    type = \"viridis\", \n    option = 'A', \n    direction = -1, \n    limits = c(0, 120), \n    oob = scales::squish,\n    breaks = seq(0, 120, 20), \n    labels = ~ ifelse(.x < 120, .x, '>120'),\n    guide = guide_colorsteps(\n      title = 'Count',\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(1, \"cm\"),\n      barheight = unit(6, \"cm\"))) +\n  labs(fill = 'count') +\n  theme_void(base_size = 16)\n\n\n\n\n\n\n\n\n\n我们也可以把整个背景都换成灰色，可以通过调整theme()中的plot.background参数进行改变。\n\n\n\nggplot() +\n  geom_sf(data = CN_county %>%\n            filter(市 == '广州市'),\n          fill = NA, color = 'gray40', size = 0.2) +\n  geom_sf(data = gz_point_count_sf, \n          aes(color = n), shape = 19, size = 1.5) +\n  geom_sf(data = CN_city %>%\n            filter(市 == '广州市'),\n          fill = NA, color = 'gray50', size = 0.6) +\n  scale_color_continuous(\n    type = \"viridis\", \n    option = 'A', \n    direction = -1, \n    limits = c(0, 120), \n    oob = scales::squish,\n    breaks = seq(0, 120, 20), \n    labels = ~ ifelse(.x < 120, .x, '>120'),\n    guide = guide_colorsteps(\n      title = 'Count',\n      title.position = \"top\",\n      title.hjust = 0.5,\n      label.hjust = 1,\n      show.limits = TRUE,\n      barwidth = unit(1, \"cm\"),\n      barheight = unit(6, \"cm\"))) +\n  labs(fill = 'count') +\n  theme_void(base_size = 16) +\n  theme(plot.background = element_rect(\n          fill = \"#d9d9d9\", \n          color = NA))\n\n\n\n\n\n\n\n\n\n点的形状可以是正方形、三角形、十字、叉、钻石等，可以通过shape = XX来进行指定，具体每个数字代表的图形可通过此博文进行学习。"
  },
  {
    "objectID": "posts/spatial-map/spatial-map.html#地址分布饼图",
    "href": "posts/spatial-map/spatial-map.html#地址分布饼图",
    "title": "个体地址的空间绘图",
    "section": "地址分布饼图",
    "text": "地址分布饼图\n\n数据整理\n\ngz_pie = gz_point_count %>% \n  arrange(-n) %>% \n  slice(1:30)\n\n\ngz_pie_sf = gz_pie %>% \n  st_as_sf(coords = c(\"X\", \"Y\"), crs = 4326)\n\n\n\n绘图\n需要改变的只是shape。此处我们设置shape = 21，因为此形状既支持fill，又支持color，能够给予绘图更多的维度和灵活性。\n\n\n\nggplot() +\n  geom_sf(data = CN_county %>%\n            filter(市 == '广州市'),\n          fill = NA, color = 'gray40', size = 0.2) +\n  geom_sf(data = gz_pie_sf, \n          aes(size = n), \n          fill = '#f768a1', color = '#7a0177', \n          shape = 21, alpha = 0.5) +\n  geom_sf(data = CN_city %>%\n            filter(市 == '广州市'),\n          fill = NA, color = 'gray50', size = 0.6) +\n  scale_size_continuous(\n    range = c(0, 28),\n    limits = c(40, 4000),\n    name = 'N') +\n  labs(fill = 'count') +\n  theme_void(base_size = 16) +\n  theme(legend.position = 'left')"
  },
  {
    "objectID": "posts/tutorial-spatial-map/tutorial-spatial-map.html#section",
    "href": "posts/tutorial-spatial-map/tutorial-spatial-map.html#section",
    "title": "蔡苗 | Miao Cai",
    "section": "",
    "text": "R语言与地图绘制\n\n\n\n蔡苗\n\n\n\n2022年10月"
  },
  {
    "objectID": "posts/tutorial-spatial-map/tutorial-spatial-map.html#公共卫生科研中的空间数据",
    "href": "posts/tutorial-spatial-map/tutorial-spatial-map.html#公共卫生科研中的空间数据",
    "title": "蔡苗 | Miao Cai",
    "section": "公共卫生科研中的空间数据",
    "text": "公共卫生科研中的空间数据\n\n\nAuthor\n\nA cohort of over 1 million participants\nA prospective cohort of half a million participants\nA nationally representative sample\n\n\nReviewer\n\n中国是哪里？\n广西是哪里？\n病人在哪里？\n样本主要在东西南北哪边？"
  },
  {
    "objectID": "posts/tutorial-spatial-map/tutorial-spatial-map.html#数据类型",
    "href": "posts/tutorial-spatial-map/tutorial-spatial-map.html#数据类型",
    "title": "蔡苗 | Miao Cai",
    "section": "数据类型",
    "text": "数据类型\n\n\n\n栅格数据（raster data）：一般是规整的相等面积的长方形格子。\n常见数据格式：.tif和.nc。 \n\n\n\n矢量数据（vector data）：点、线、多边形（polygons）。\n常见数据格式：.shp。"
  },
  {
    "objectID": "posts/tutorial-spatial-map/tutorial-spatial-map.html#相关r包",
    "href": "posts/tutorial-spatial-map/tutorial-spatial-map.html#相关r包",
    "title": "蔡苗 | Miao Cai",
    "section": "相关R包",
    "text": "相关R包\n\n\n栅格数据（raster data）\n\n新：stars\n旧：raster, terra\n\n\n矢量数据\n\n新：sf\n旧：sp\n\n\n\n\n\n\n\n\n\nstars\n\n\n\n\n\n\n\n\nsf"
  },
  {
    "objectID": "posts/tutorial-spatial-map/tutorial-spatial-map.html#相关函数",
    "href": "posts/tutorial-spatial-map/tutorial-spatial-map.html#相关函数",
    "title": "蔡苗 | Miao Cai",
    "section": "相关函数",
    "text": "相关函数\n读取数据\n\n矢量数据：sf::read_sf()\n栅格数据：\n\n新：stars::read_stars()\n旧：raster::raster(), terra\n\n\n数据绘图\n此处只介绍运用ggplot2图层语法进行绘图的函数\n\n矢量数据：geom_sf()\n栅格数据：geom_stars()"
  },
  {
    "objectID": "posts/tutorial-spatial-map/tutorial-spatial-map.html#加载环境",
    "href": "posts/tutorial-spatial-map/tutorial-spatial-map.html#加载环境",
    "title": "蔡苗 | Miao Cai",
    "section": "加载环境",
    "text": "加载环境\n首先需要加载R环境和相关的包。如果你使用的是课题组的Linux服务器，则下面三行均需要运行。如果你使用自己的电脑，或者你的R包环境已经配置好，可以忽略pacman::p_load下面的那两句。\n\npacman::p_load(raster, sf, stars, cubelyr, dplyr, ggplot2, viridis, here, ggspatial)\n\noptions(rgl.useNULL = TRUE)\nSys.setenv(PROJ_LIB = '/data1/Software/Installed/Anaconda3/envs/r4.1/share/proj')"
  },
  {
    "objectID": "posts/tutorial-spatial-map/tutorial-spatial-map.html#test",
    "href": "posts/tutorial-spatial-map/tutorial-spatial-map.html#test",
    "title": "蔡苗 | Miao Cai",
    "section": "test",
    "text": "test\n\n1 + 1"
  },
  {
    "objectID": "posts/tutorial-spatial-map/tutorial-spatial-map.html#test-output",
    "href": "posts/tutorial-spatial-map/tutorial-spatial-map.html#test-output",
    "title": "蔡苗 | Miao Cai",
    "section": "test",
    "text": "test\n\n[1] 2"
  },
  {
    "objectID": "CV.html",
    "href": "CV.html",
    "title": "CV",
    "section": "",
    "text": "English CV"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "简历 | CV",
    "section": "",
    "text": "中文简历\nEnglish CV"
  },
  {
    "objectID": "cv.html#教育经历",
    "href": "cv.html#教育经历",
    "title": "简历 | CV",
    "section": "教育经历",
    "text": "教育经历\n\n2017 – 2020 美国圣路易斯大学 | 生物统计方向 | 公共卫生学博士\n2014 – 2017 中国华中科技大学 | 医院管理学方向 | 管理学硕士\n2010 – 2014 中国华中科技大学 | 卫生事业管理学方向 | 管理学学士"
  },
  {
    "objectID": "cv.html#工作经历",
    "href": "cv.html#工作经历",
    "title": "简历 | CV",
    "section": "工作经历",
    "text": "工作经历\n\n2021 – 2022 中山大学公共卫生学院 | 博士后\n2019 – 2021 美国退伍军人事务部圣路易斯分部临床流行病学研究中心 | 生物统计研究员\n2017 – 2019 圣路易斯大学公共卫生与社会正义学院(美国国家自然科学基金资助) | 研究助理\n2016 - 2016 湖北武汉雕龙数据科技有限公司 | 数据科学家"
  }
]