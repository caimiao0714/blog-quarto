---
title: '个体地址的空间绘图'
author: '蔡苗'
date: '2022-10-04'
categories:
  - R
  - spatial
#draft: false
---

在公共卫生的科研论文或标书撰写过程中，我们常常需要使用地址数据。此时，能用可视化的方式展示样本的空间分布往往能够给编辑或审稿人较好的印象分。

# 空间数据总述

## 数据类型

- 矢量数据（vector data）：点、线、多边形（polygons）。常见数据格式：`.shp`。
- 栅格数据（raster data）：一般是规整的相等面积的长方形格子。常见数据格式：`.tif`和`.nc`。

下图展示了矢量数据和栅格数据的示意图

::: {layout="[10,10]" layout-valign="bottom"}
![矢量数据示例（广州市区县边界）](vector-data-example.png)

![栅格数据示例（广州市区PM$_{2.5}$浓度分布）](raster-data-example.png)
:::


## 相关R包

- 矢量数据：
  - 新：`sf`
  - 旧：`sp`
- 栅格数据：
  - 新：`stars`
  - 旧：`raster`, `terra`

## 相关函数

### 读取数据

- 矢量数据：`sf::read_sf()`
- 栅格数据：
  - 新：`stars::read_stars()`
  - 旧：`raster::raster()`, `terra`



# R语言实践

## 加载环境

首先需要加载R环境和相关的包。如果你使用的是课题组的Linux服务器，则下面三行均需要运行。如果你使用自己的电脑，或者你的R包环境已经配置好，可以忽略`pacman::p_load`下面的那两句。

```{r}
#| run: FALSE
pacman::p_load(sf, stars, raster, dplyr, ggplot2, viridis, here, patchwork, ggspatial)

options(rgl.useNULL = TRUE)
Sys.setenv(PROJ_LIB = '/data1/Software/Installed/Anaconda3/envs/r4.1/share/proj')
```


```{r}
#| eval: false
#| echo: false
setwd('posts/spatial-map')
```


## 矢量边界绘制

本节以中国的矢量图边界为例，展示用R的`sf`和`dplyr`包来处理矢量地图数据（`.shp`文件），然后用`ggplot2`来绘制矢量边界地图。由于全国的所有边界数据较大，绘制时间比较久，因此大部分时间本文采用广州市的区县边界进行展示。

### 数据位置

```{r, echo = c(1, 3:6)}
#| run: FALSE
shp_path = '/data2/ShareData/MAP/China_shp/'
shp_path = 'E:/China_shp'

fs::dir_info(shp_path) %>% 
  select(path, size) %>% 
  filter(grepl('\\.shp', path))
```

从上到下分别是：

1.  中国国界（`boundary.shp`）
2.  中国市级边界（`city.shp`）
3.  中国区县级边界（`county.shp`）
4.  九段线（`NineLine.shp`）
5.  中国省级边界（`province.shp`）

### 数据读取

```{r}
CN_boundary <- read_sf(here(shp_path, 'boundary.shp'))
CN_city <- read_sf(here(shp_path, 'city.shp'))
CN_county <- read_sf(here(shp_path, 'county.shp'))
CN_9dash <- read_sf(here(shp_path, 'NineLine.shp'))
CN_province <- read_sf(here(shp_path, 'province.shp'))
```

### 数据清理

这些矢量数据实际就像数据框，可以使用`dplyr`（`dplyr::select()`，`mutate()`, `filter()`, `arrange()`）的语法进行操作。例如，可以使用`filter()`选取广州市的区县边界：

```{r}
CN_county %>% 
  filter(市 == '广州市')
```

### 矢量边界绘制

我们可以使用`ggplot2::geom_sf()`对广州市的区县边界进行绘制：

```{r}
#| output-location: column
#| fig.width: 5
#| fig-height: 4
ggplot() + 
  geom_sf(
    data = CN_county %>% 
      filter(市 == '广州市')) +
  theme_void()
```

如果你讨厌灰色的填充颜色，也可以通过`fill = NA`把颜色去掉：

```{r}
#| output-location: column
#| fig.width: 5
#| fig-height: 4
ggplot() + 
  geom_sf(
    data = CN_county %>% 
      filter(市 == '广州市'),
    fill = NA) +
  theme_void()
```

加上指北针和标尺

```{r}
#| output-location: column
#| fig.width: 5
#| fig-height: 4
ggplot() + 
  geom_sf(
    data = CN_county %>% 
      filter(市 == '广州市'),
    fill = NA) +
  annotation_scale( # 标尺
    width_hint = 0.4,
    text_cex = 1,
    unit_category = 'metric',
    location = 'bl') +
  annotation_north_arrow( # 指北针
    location = "tl", 
    which_north = "true",
    height = unit(0.7, "cm"),
    width = unit(0.7, "cm"),
    pad_y = unit(0.5, "cm")) +
  theme_void()
```


### 投影

WGS84是目前最流行的地理坐标系统。在国际上，每个坐标系统都会被分配一个EPSG 代码，`EPSG:4326`就是WGS84 的代码。GPS是基于WGS84的，所以通常我们得到的坐标数据都是WGS84的。一般我们在存储数据时，仍然按WGS84存储。计算地理距离时也应该通过WGS84投影进行计算。

但是如果绘图的时候使用WGS84投影，会显得靠近两极地区的面积失真。对于中国地图来说，WGS84投影非常不美观，画图来的地图像“一只强制性脊柱炎的公鸡”。因此，如果需要绘制全国地图，可以使用`ESPG: 4508`或者`ESPG: 32649`，在`ggplot2`中可以通过`coord_sf(crs = XXXX)`来设置整幅图的投影。


::: {.panel-tabset}

## ESPG: 4326

```{r}
#| eval: false
ggplot() + 
  geom_sf(data = CN_province, fill = NA, size = 0.1) +
  geom_sf(data = CN_9dash %>% 
            filter(LEFT_FID == 0)) +
  labs(title = 'ESPG: 4326') +
  theme_void(base_size = 14) +
  coord_sf(crs = 4326)
```

![](ESPG-4326.png){width=75% fig-align="center"}

## ESPG: 4326

```{r}
#| eval: false
ggplot() + 
  geom_sf(data = CN_province, fill = NA, size = 0.1) +
  geom_sf(data = CN_9dash %>% 
            filter(LEFT_FID == 0)) +
  labs(title = 'ESPG: 4508') +
  theme_void(base_size = 14) +
  coord_sf(crs = 4508)
```

![](ESPG-4508.png){width=75% fig-align="center"}

## ESPG: 32649

```{r}
#| eval: false
ggplot() + 
  geom_sf(data = CN_province, fill = NA, size = 0.1) +
  geom_sf(data = CN_9dash %>% 
            filter(LEFT_FID == 0)) +
  labs(title = 'ESPG: 32649') +
  theme_void(base_size = 14) +
  coord_sf(crs = 32649)
```

![](ESPG-32649.png){width=75% fig-align="center"}

:::






## 栅格数据绘制

### 数据读取

```{r}
pm_gz = read_stars('E:/China_shp/CHAP_PM2.5_Guangzhou.tif')
pm_gz
```

### 栅格数据绘制

```{r}
ggplot() +
  geom_stars(data = pm_gz) +
  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white', breaks = 20:29) +
  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +
  guides(fill = guide_coloursteps( # guide_colourbar
      title.position = "top",
      title.theme = element_text(size = 16),
      title.hjust = 0.5,
      label.hjust = 1,
      show.limits = TRUE,
      barwidth = unit(0.7, "cm"),
      barheight = unit(7, "cm"),
      ticks = FALSE,
      ticks.colour = 'white',
      ticks.linewidth = 1.5)) +
  theme_void(base_size = 16) +
  coord_sf(crs = 4326)
```



### 栅格和矢量数据混合绘制

单纯的栅格数据比较单调，缺少行政边界信息。通过`ggplot2`的图层，我们可以轻松地加上矢量边界信息。

```{r}
ggplot() +
  geom_stars(data = pm_gz) +
  geom_sf(data = CN_county %>% 
      filter(市 == '广州市'), fill = NA) +
  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white') +
  theme_void(base_size = 16) +
  coord_sf(crs = 4326)
```

## 矢量和栅格数据相互转换

### 矢量 --> 等面积格子

将行政边界数据转换成相等大小的小格子。

```{r}
gz_rect = CN_city %>% 
  filter(市 == '广州市') %>% 
  st_transform(crs = 4326) %>% 
  st_make_grid(cellsize = c(0.02, 0.02))

ggplot() + 
  geom_sf(data = gz_rect, fill = NA, size = 0.1) +
  geom_sf(data = filter(CN_county, 市 == '广州市'), 
          fill = 'gray60', alpha = 0.3, size = 0.5) +
  theme_void()
```

```{r}
gz_grids = st_intersection(
  gz_rect, 
  CN_city %>% 
    filter(市 == '广州市') %>% 
    st_transform(crs = 4326))

ggplot() + 
  geom_sf(data = gz_grids, fill = NA) +
  theme_void()
```


### 栅格 --> 矢量

```{r}
pm_gz
```


```{r}
pm_gz_sf = st_as_sf(pm_gz, as_points = FALSE, merge = FALSE)
pm_gz_sf
```


```{r}
ggplot() + 
  geom_sf(data = pm_gz_sf, fill = NA) +
  theme_void()
```

可以加上格子的边界，只用于提醒这里是规则格子的矢量多边形，而不是栅格数据。

```{r}
ggplot() +
  geom_sf(data = pm_gz_sf, aes(fill = CHAP_PM2.5_Guangzhou.tif), 
          color = 'white', size = 0.1) +
  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white', breaks = 20:29) +
  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +
  guides(fill = guide_coloursteps( # guide_colourbar
      title.position = "top",
      title.theme = element_text(size = 16),
      title.hjust = 0.5,
      label.hjust = 1,
      show.limits = TRUE,
      barwidth = unit(0.7, "cm"),
      barheight = unit(7, "cm"),
      ticks = FALSE,
      ticks.colour = 'white',
      ticks.linewidth = 1.5)) +
  theme_void(base_size = 16) +
  coord_sf(crs = 4326)
```

去掉白色的边界后图如下所示，生成的图与使用`geom_stars()`和栅格数据画出来的图像一模一样。

```{r}
ggplot() +
  geom_sf(data = pm_gz_sf, aes(fill = CHAP_PM2.5_Guangzhou.tif), 
          color = NA) +
  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white', breaks = 20:29) +
  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +
  guides(fill = guide_coloursteps( # guide_colourbar
      title.position = "top",
      title.theme = element_text(size = 16),
      title.hjust = 0.5,
      label.hjust = 1,
      show.limits = TRUE,
      barwidth = unit(0.7, "cm"),
      barheight = unit(7, "cm"),
      ticks = FALSE,
      ticks.colour = 'white',
      ticks.linewidth = 1.5)) +
  theme_void(base_size = 16) +
  coord_sf(crs = 4326)
```


## `sf` points

## sample from multivariate normal distributions

```{r}
n_obs = 5*10^3



sigma <- matrix(c(1, 1, 1, 1), 2, 2)

var_comp = MASS::mvrnorm(n = n_obs, rep(0, 2), sigma) %>% 
  as.data.frame()
colnames(var_comp) = c('var1', 'var2')

sysu = tibble(
    lat = c(23.128, 23.09, 23.13, 23.10, 23.23, 23.11),
    lon = c(113.289, 113.29, 113.32, 113.33, 113.22, 113.42)) %>% 
  slice(sample(1:n(), n_obs, replace = T)) %>% 
  bind_cols(var_comp) %>% 
  mutate(lat = lat + var1,
         lon = lon + var1)


sysu_sf = sysu %>% 
  st_as_sf(coords = c("lon", "lat"), crs = 4326) %>% 
  mutate(intersection = geometry %>% 
           st_intersects(
             CN_city %>% 
               filter(市 == '广州市') %>% 
               st_transform(crs = 4326)) %>% 
           as.character()) %>% 
  filter(intersection == 1)



ggplot() + 
  geom_sf(
    data = CN_county %>% 
      filter(市 == '广州市'), fill = NA) +
  geom_sf(data = sysu_sf, size = 1, alpha = 0.2) +
  theme_void()
```





```{r}
#| eval: false
#| echo: false
# Convert from raster to sf polygons
pm_gz_sf = st_as_sf(pm_gz, as_points = FALSE, merge = FALSE)

ggplot() +
  geom_sf(data = pm_gz_sf, aes(fill = CHAP_PM2.5_Guangzhou.tif), color = 'white', size = 0.1) +
  scale_fill_viridis(option = 'A', direction = -1, na.value = 'white', breaks = 20:30) +
  labs(fill = latex2exp::TeX('PM$_{2.5}$')) +
  guides(fill = guide_coloursteps( # guide_colourbar
      title.position = "top",
      title.theme = element_text(size = 16),
      title.hjust = 0.5,
      label.hjust = 1,
      show.limits = TRUE,
      barwidth = unit(0.7, "cm"),
      barheight = unit(7, "cm"),
      ticks = FALSE,
      ticks.colour = 'white',
      ticks.linewidth = 1.5)) +
  theme_void(base_size = 16) +
  coord_sf(crs = 4326)
ggsave('raster-data-example.png', width = 6, height = 6)
```


```{r}
#| eval: false
#| echo: false
ggplot() +
  geom_sf(data = CN_county %>% 
      filter(市 == '广州市'), fill = NA) +
  theme_void() +
  coord_sf(crs = 4326)
ggsave('vector-data-example.png', width = 6, height = 6)
```


